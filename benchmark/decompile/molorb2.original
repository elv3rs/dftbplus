__attribute__((fn spec (". r r r r r r r r r r r r r r r r r r r r r w w ")))
void localgetvalue (struct array01_real(kind=8) & restrict origin, struct array02_real(kind=8) & restrict gridvecs, struct array02_real(kind=8) & restrict eigvecsreal, struct array02_complex(kind=8) & restrict eigvecscmpl, integer(kind=4) & restrict natom, integer(kind=4) & restrict norb, struct array03_real(kind=8) & restrict coords, struct array01_integer(kind=4) & restrict species, struct array01_real(kind=8) & restrict cutoffs, struct array01_integer(kind=4) & restrict istos, struct array01_integer(kind=4) & restrict angmoms, struct array01_tslaterorbital & restrict stos, logical(kind=4) & restrict tperiodic, logical(kind=4) & restrict treal, struct array02_real(kind=8) & restrict latvecs, struct array02_real(kind=8) & restrict recvecs2p, struct array02_real(kind=8) & restrict kpoints, struct array01_integer(kind=4) & restrict kindexes, integer(kind=4) & restrict ncell, struct array02_real(kind=8) & restrict cellvec, logical(kind=4) & restrict tadddensities, struct array04_real(kind=8) & restrict valuereal, struct array04_complex(kind=8) & restrict valuecmpl)
{
  integer(kind=8) ubound.0;
  integer(kind=8) stride.1;
  integer(kind=8) offset.2;
  integer(kind=8) size.3;
  integer(kind=4)[0:D.5621] * restrict angmoms.0;
  real(kind=8) cachebasis[9];
  real(kind=8) cachegridvecs[9];
  integer(kind=4) cacheind;
  struct array02_integer(kind=4) cacheindexmap;
  integer(kind=4) cachesize;
  static struct array03_integer(kind=4) chunkedindices = {.data=0B};
  integer(kind=4) coeffind;
  integer(kind=8) ubound.4;
  integer(kind=8) stride.5;
  integer(kind=8) ubound.6;
  integer(kind=8) stride.7;
  integer(kind=8) ubound.8;
  integer(kind=8) stride.9;
  integer(kind=8) offset.10;
  integer(kind=8) size.11;
  real(kind=8)[0:D.5597] * restrict coords.0;
  real(kind=8) curcoords[9];
  integer(kind=8) ubound.12;
  integer(kind=8) stride.13;
  integer(kind=8) offset.14;
  integer(kind=8) size.15;
  real(kind=8)[0:D.5605] * restrict cutoffs.0;
  real(kind=8) diff[3];
  integer(kind=8) ubound.16;
  integer(kind=8) stride.17;
  integer(kind=8) ubound.18;
  integer(kind=8) stride.19;
  integer(kind=8) offset.20;
  integer(kind=8) size.21;
  real(kind=8)[0:D.5573] * restrict eigvecsreal.0;
  real(kind=8) expectedsizemb;
  real(kind=8) frac[3];
  integer(kind=8) ubound.22;
  integer(kind=8) stride.23;
  integer(kind=8) ubound.24;
  integer(kind=8) stride.25;
  integer(kind=8) offset.26;
  integer(kind=8) size.27;
  real(kind=8)[0:D.5609] * restrict gridvecs.0;
  integer(kind=4) i1;
  integer(kind=4) i1chunked;
  integer(kind=4) i2;
  integer(kind=4) i2chunked;
  integer(kind=4) i3;
  integer(kind=4) i3chunked;
  integer(kind=4) iatom;
  struct array02_integer(kind=4) icache;
  integer(kind=4) icell;
  struct array01_integer(kind=4) ichunk;
  integer(kind=4) ieig;
  integer(kind=4) il;
  integer(kind=4) im;
  struct array02_integer(kind=4) imain;
  integer(kind=4) iorb;
  integer(kind=4) ispecies;
  integer(kind=8) ubound.28;
  integer(kind=8) stride.29;
  integer(kind=8) offset.30;
  integer(kind=8) size.31;
  integer(kind=4)[0:D.5577] * restrict istos.0;
  integer(kind=8) ubound.32;
  integer(kind=8) stride.33;
  integer(kind=8) ubound.34;
  integer(kind=8) stride.35;
  integer(kind=8) offset.36;
  integer(kind=8) size.37;
  real(kind=8)[0:D.5625] * restrict kpoints.0;
  integer(kind=8) ubound.38;
  integer(kind=8) stride.39;
  integer(kind=8) ubound.40;
  integer(kind=8) stride.41;
  integer(kind=8) offset.42;
  integer(kind=8) size.43;
  real(kind=8)[0:D.5585] * restrict latvecs.0;
  integer(kind=4) npoints[4];
  integer(kind=4) npointshalved[3];
  integer(kind=4) nuniqueorb;
  integer(kind=8) ubound.44;
  integer(kind=8) stride.45;
  integer(kind=8) offset.46;
  integer(kind=8) size.47;
  real(kind=8)[0:D.5593] * restrict origin.0;
  real(kind=8) pos[3];
  integer(kind=8) ubound.48;
  integer(kind=8) stride.49;
  integer(kind=8) ubound.50;
  integer(kind=8) stride.51;
  integer(kind=8) offset.52;
  integer(kind=8) size.53;
  real(kind=8)[0:D.5589] * restrict recvecs2p.0;
  integer(kind=4) resolutionfactor[3];
  static struct array04_integer(kind=4) sliceindicescache = {.data=0B};
  static struct array04_integer(kind=4) sliceindicesmain = {.data=0B};
  integer(kind=8) ubound.54;
  integer(kind=8) stride.55;
  integer(kind=8) offset.56;
  integer(kind=8) size.57;
  integer(kind=4)[0:D.5601] * restrict species.0;
  integer(kind=8) ubound.58;
  integer(kind=8) stride.59;
  integer(kind=8) offset.60;
  integer(kind=8) size.61;
  struct tslaterorbital[0:D.5581] * restrict stos.0;
  real(kind=8) targetresolution[3];
  static logical(kind=4) tcacheinitialised = 0;
  real(kind=8) val;
  integer(kind=8) ubound.62;
  integer(kind=8) stride.63;
  integer(kind=8) ubound.64;
  integer(kind=8) stride.65;
  integer(kind=8) ubound.66;
  integer(kind=8) stride.67;
  integer(kind=8) ubound.68;
  integer(kind=8) stride.69;
  integer(kind=8) offset.70;
  integer(kind=8) size.71;
  complex(kind=8)[0:D.5613] * restrict valuecmpl.0;
  integer(kind=8) ubound.72;
  integer(kind=8) stride.73;
  integer(kind=8) ubound.74;
  integer(kind=8) stride.75;
  integer(kind=8) ubound.76;
  integer(kind=8) stride.77;
  integer(kind=8) ubound.78;
  integer(kind=8) stride.79;
  integer(kind=8) offset.80;
  integer(kind=8) size.81;
  real(kind=8)[0:D.5617] * restrict valuereal.0;
  static struct array07_real(kind=8) wavefunctioncache = {.data=0B};
  real(kind=8) xx;
  real(kind=8) xyz[3];
  integer(kind=8) D.5573;
  bitsizetype D.5574;
  sizetype D.5575;
  integer(kind=8) D.5577;
  bitsizetype D.5578;
  sizetype D.5579;
  integer(kind=8) D.5581;
  bitsizetype D.5582;
  sizetype D.5583;
  integer(kind=8) D.5585;
  bitsizetype D.5586;
  sizetype D.5587;
  integer(kind=8) D.5589;
  bitsizetype D.5590;
  sizetype D.5591;
  integer(kind=8) D.5593;
  bitsizetype D.5594;
  sizetype D.5595;
  integer(kind=8) D.5597;
  bitsizetype D.5598;
  sizetype D.5599;
  integer(kind=8) D.5601;
  bitsizetype D.5602;
  sizetype D.5603;
  integer(kind=8) D.5605;
  bitsizetype D.5606;
  sizetype D.5607;
  integer(kind=8) D.5609;
  bitsizetype D.5610;
  sizetype D.5611;
  integer(kind=8) D.5613;
  bitsizetype D.5614;
  sizetype D.5615;
  integer(kind=8) D.5617;
  bitsizetype D.5618;
  sizetype D.5619;
  integer(kind=8) D.5621;
  bitsizetype D.5622;
  sizetype D.5623;
  integer(kind=8) D.5625;
  bitsizetype D.5626;
  sizetype D.5627;

  try
    {
      {
        integer(kind=8) D.5624;

        D.5624 = kpoints->dim[0].stride;
        stride.33 = D.5624 != 0 ? D.5624 : 1;
        kpoints.0 = (real(kind=8)[0:D.5625] * restrict) kpoints->data;
        ubound.32 = (kpoints->dim[0].ubound - kpoints->dim[0].lbound) + 1;
        stride.35 = kpoints->dim[1].stride;
        ubound.34 = (kpoints->dim[1].ubound - kpoints->dim[1].lbound) + 1;
        size.37 = stride.35 * NON_LVALUE_EXPR <ubound.34>;
        offset.36 = -NON_LVALUE_EXPR <stride.33> - NON_LVALUE_EXPR <stride.35>;
        D.5625 = size.37 + -1;
        D.5626 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.37> * 64;
        D.5627 = (sizetype) NON_LVALUE_EXPR <size.37> * 8;
      }
      {
        integer(kind=8) D.5620;

        D.5620 = angmoms->dim[0].stride;
        stride.1 = D.5620 != 0 ? D.5620 : 1;
        angmoms.0 = (integer(kind=4)[0:D.5621] * restrict) angmoms->data;
        ubound.0 = (angmoms->dim[0].ubound - angmoms->dim[0].lbound) + 1;
        size.3 = stride.1 * NON_LVALUE_EXPR <ubound.0>;
        offset.2 = -NON_LVALUE_EXPR <stride.1>;
        D.5621 = size.3 + -1;
        D.5622 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.3> * 32;
        D.5623 = (sizetype) NON_LVALUE_EXPR <size.3> * 4;
      }
      {
        integer(kind=8) D.5616;

        D.5616 = valuereal->dim[0].stride;
        stride.73 = D.5616 != 0 ? D.5616 : 1;
        valuereal.0 = (real(kind=8)[0:D.5617] * restrict) valuereal->data;
        ubound.72 = (valuereal->dim[0].ubound - valuereal->dim[0].lbound) + 1;
        stride.75 = valuereal->dim[1].stride;
        ubound.74 = (valuereal->dim[1].ubound - valuereal->dim[1].lbound) + 1;
        stride.77 = valuereal->dim[2].stride;
        ubound.76 = (valuereal->dim[2].ubound - valuereal->dim[2].lbound) + 1;
        stride.79 = valuereal->dim[3].stride;
        ubound.78 = (valuereal->dim[3].ubound - valuereal->dim[3].lbound) + 1;
        size.81 = stride.79 * NON_LVALUE_EXPR <ubound.78>;
        offset.80 = ((-NON_LVALUE_EXPR <stride.73> - NON_LVALUE_EXPR <stride.75>) - NON_LVALUE_EXPR <stride.77>) - NON_LVALUE_EXPR <stride.79>;
        D.5617 = size.81 + -1;
        D.5618 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.81> * 64;
        D.5619 = (sizetype) NON_LVALUE_EXPR <size.81> * 8;
      }
      {
        integer(kind=8) D.5612;

        D.5612 = valuecmpl->dim[0].stride;
        stride.63 = D.5612 != 0 ? D.5612 : 1;
        valuecmpl.0 = (complex(kind=8)[0:D.5613] * restrict) valuecmpl->data;
        ubound.62 = (valuecmpl->dim[0].ubound - valuecmpl->dim[0].lbound) + 1;
        stride.65 = valuecmpl->dim[1].stride;
        ubound.64 = (valuecmpl->dim[1].ubound - valuecmpl->dim[1].lbound) + 1;
        stride.67 = valuecmpl->dim[2].stride;
        ubound.66 = (valuecmpl->dim[2].ubound - valuecmpl->dim[2].lbound) + 1;
        stride.69 = valuecmpl->dim[3].stride;
        ubound.68 = (valuecmpl->dim[3].ubound - valuecmpl->dim[3].lbound) + 1;
        size.71 = stride.69 * NON_LVALUE_EXPR <ubound.68>;
        offset.70 = ((-NON_LVALUE_EXPR <stride.63> - NON_LVALUE_EXPR <stride.65>) - NON_LVALUE_EXPR <stride.67>) - NON_LVALUE_EXPR <stride.69>;
        D.5613 = size.71 + -1;
        D.5614 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.71> * 128;
        D.5615 = (sizetype) NON_LVALUE_EXPR <size.71> * 16;
      }
      {
        integer(kind=8) D.5608;

        D.5608 = gridvecs->dim[0].stride;
        stride.23 = D.5608 != 0 ? D.5608 : 1;
        gridvecs.0 = (real(kind=8)[0:D.5609] * restrict) gridvecs->data;
        ubound.22 = (gridvecs->dim[0].ubound - gridvecs->dim[0].lbound) + 1;
        stride.25 = gridvecs->dim[1].stride;
        ubound.24 = (gridvecs->dim[1].ubound - gridvecs->dim[1].lbound) + 1;
        size.27 = stride.25 * NON_LVALUE_EXPR <ubound.24>;
        offset.26 = -NON_LVALUE_EXPR <stride.23> - NON_LVALUE_EXPR <stride.25>;
        D.5609 = size.27 + -1;
        D.5610 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.27> * 64;
        D.5611 = (sizetype) NON_LVALUE_EXPR <size.27> * 8;
      }
      {
        integer(kind=8) D.5604;

        D.5604 = cutoffs->dim[0].stride;
        stride.13 = D.5604 != 0 ? D.5604 : 1;
        cutoffs.0 = (real(kind=8)[0:D.5605] * restrict) cutoffs->data;
        ubound.12 = (cutoffs->dim[0].ubound - cutoffs->dim[0].lbound) + 1;
        size.15 = stride.13 * NON_LVALUE_EXPR <ubound.12>;
        offset.14 = -NON_LVALUE_EXPR <stride.13>;
        D.5605 = size.15 + -1;
        D.5606 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.15> * 64;
        D.5607 = (sizetype) NON_LVALUE_EXPR <size.15> * 8;
      }
      {
        integer(kind=8) D.5600;

        D.5600 = species->dim[0].stride;
        stride.55 = D.5600 != 0 ? D.5600 : 1;
        species.0 = (integer(kind=4)[0:D.5601] * restrict) species->data;
        ubound.54 = (species->dim[0].ubound - species->dim[0].lbound) + 1;
        size.57 = stride.55 * NON_LVALUE_EXPR <ubound.54>;
        offset.56 = -NON_LVALUE_EXPR <stride.55>;
        D.5601 = size.57 + -1;
        D.5602 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.57> * 32;
        D.5603 = (sizetype) NON_LVALUE_EXPR <size.57> * 4;
      }
      {
        integer(kind=8) D.5596;

        D.5596 = coords->dim[0].stride;
        stride.5 = D.5596 != 0 ? D.5596 : 1;
        coords.0 = (real(kind=8)[0:D.5597] * restrict) coords->data;
        ubound.4 = (coords->dim[0].ubound - coords->dim[0].lbound) + 1;
        stride.7 = coords->dim[1].stride;
        ubound.6 = (coords->dim[1].ubound - coords->dim[1].lbound) + 1;
        stride.9 = coords->dim[2].stride;
        ubound.8 = (coords->dim[2].ubound - coords->dim[2].lbound) + 1;
        size.11 = stride.9 * NON_LVALUE_EXPR <ubound.8>;
        offset.10 = (-NON_LVALUE_EXPR <stride.5> - NON_LVALUE_EXPR <stride.7>) - NON_LVALUE_EXPR <stride.9>;
        D.5597 = size.11 + -1;
        D.5598 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.11> * 64;
        D.5599 = (sizetype) NON_LVALUE_EXPR <size.11> * 8;
      }
      {
        integer(kind=8) D.5592;

        D.5592 = origin->dim[0].stride;
        stride.45 = D.5592 != 0 ? D.5592 : 1;
        origin.0 = (real(kind=8)[0:D.5593] * restrict) origin->data;
        ubound.44 = (origin->dim[0].ubound - origin->dim[0].lbound) + 1;
        size.47 = stride.45 * NON_LVALUE_EXPR <ubound.44>;
        offset.46 = -NON_LVALUE_EXPR <stride.45>;
        D.5593 = size.47 + -1;
        D.5594 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.47> * 64;
        D.5595 = (sizetype) NON_LVALUE_EXPR <size.47> * 8;
      }
      {
        integer(kind=8) D.5588;

        D.5588 = recvecs2p->dim[0].stride;
        stride.49 = D.5588 != 0 ? D.5588 : 1;
        recvecs2p.0 = (real(kind=8)[0:D.5589] * restrict) recvecs2p->data;
        ubound.48 = (recvecs2p->dim[0].ubound - recvecs2p->dim[0].lbound) + 1;
        stride.51 = recvecs2p->dim[1].stride;
        ubound.50 = (recvecs2p->dim[1].ubound - recvecs2p->dim[1].lbound) + 1;
        size.53 = stride.51 * NON_LVALUE_EXPR <ubound.50>;
        offset.52 = -NON_LVALUE_EXPR <stride.49> - NON_LVALUE_EXPR <stride.51>;
        D.5589 = size.53 + -1;
        D.5590 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.53> * 64;
        D.5591 = (sizetype) NON_LVALUE_EXPR <size.53> * 8;
      }
      {
        integer(kind=8) D.5584;

        D.5584 = latvecs->dim[0].stride;
        stride.39 = D.5584 != 0 ? D.5584 : 1;
        latvecs.0 = (real(kind=8)[0:D.5585] * restrict) latvecs->data;
        ubound.38 = (latvecs->dim[0].ubound - latvecs->dim[0].lbound) + 1;
        stride.41 = latvecs->dim[1].stride;
        ubound.40 = (latvecs->dim[1].ubound - latvecs->dim[1].lbound) + 1;
        size.43 = stride.41 * NON_LVALUE_EXPR <ubound.40>;
        offset.42 = -NON_LVALUE_EXPR <stride.39> - NON_LVALUE_EXPR <stride.41>;
        D.5585 = size.43 + -1;
        D.5586 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.43> * 64;
        D.5587 = (sizetype) NON_LVALUE_EXPR <size.43> * 8;
      }
      {
        integer(kind=8) D.5580;

        D.5580 = stos->dim[0].stride;
        stride.59 = D.5580 != 0 ? D.5580 : 1;
        stos.0 = (struct tslaterorbital[0:D.5581] * restrict) stos->data;
        ubound.58 = (stos->dim[0].ubound - stos->dim[0].lbound) + 1;
        size.61 = stride.59 * NON_LVALUE_EXPR <ubound.58>;
        offset.60 = -NON_LVALUE_EXPR <stride.59>;
        D.5581 = size.61 + -1;
        D.5582 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.61> * 1984;
        D.5583 = (sizetype) NON_LVALUE_EXPR <size.61> * 248;
      }
      {
        integer(kind=8) D.5576;

        D.5576 = istos->dim[0].stride;
        stride.29 = D.5576 != 0 ? D.5576 : 1;
        istos.0 = (integer(kind=4)[0:D.5577] * restrict) istos->data;
        ubound.28 = (istos->dim[0].ubound - istos->dim[0].lbound) + 1;
        size.31 = stride.29 * NON_LVALUE_EXPR <ubound.28>;
        offset.30 = -NON_LVALUE_EXPR <stride.29>;
        D.5577 = size.31 + -1;
        D.5578 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.31> * 32;
        D.5579 = (sizetype) NON_LVALUE_EXPR <size.31> * 4;
      }
      {
        integer(kind=8) D.5572;

        D.5572 = eigvecsreal->dim[0].stride;
        stride.17 = D.5572 != 0 ? D.5572 : 1;
        eigvecsreal.0 = (real(kind=8)[0:D.5573] * restrict) eigvecsreal->data;
        ubound.16 = (eigvecsreal->dim[0].ubound - eigvecsreal->dim[0].lbound) + 1;
        stride.19 = eigvecsreal->dim[1].stride;
        ubound.18 = (eigvecsreal->dim[1].ubound - eigvecsreal->dim[1].lbound) + 1;
        size.21 = stride.19 * NON_LVALUE_EXPR <ubound.18>;
        offset.20 = -NON_LVALUE_EXPR <stride.17> - NON_LVALUE_EXPR <stride.19>;
        D.5573 = size.21 + -1;
        D.5574 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.21> * 64;
        D.5575 = (sizetype) NON_LVALUE_EXPR <size.21> * 8;
      }
      cacheindexmap.data = 0B;
      cacheindexmap.dtype = {.elem_len=4, .rank=2, .type=1};
      icache.dtype = {.elem_len=4, .rank=2, .type=1};
      icache.span = 0;
      ichunk.dtype = {.elem_len=4, .rank=1, .type=1};
      ichunk.span = 0;
      imain.dtype = {.elem_len=4, .rank=2, .type=1};
      imain.span = 0;
      {
        integer(kind=4) __var_1_fcn;
        integer(kind=8) D.5007;
        integer(kind=8) D.5008;
        integer(kind=4) D.5009;
        integer(kind=8) D.5010;
        integer(kind=8) D.5011;
        integer(kind=8) D.5012;
        integer(kind=4) D.5013;
        integer(kind=8) D.5014;
        integer(kind=8) D.5015;
        integer(kind=8) D.5016;
        integer(kind=4) D.5017;
        integer(kind=8) D.5018;
        integer(kind=8) D.5019;
        integer(kind=8) D.5020;
        integer(kind=4) D.5021;
        integer(kind=8) D.5022;
        integer(kind=8) D.5023;
        integer(kind=8) D.5024;
        integer(kind=4) D.5025;
        integer(kind=8) D.5026;
        integer(kind=8) D.5027;
        integer(kind=8) D.5028;
        integer(kind=4) D.5029;
        integer(kind=8) D.5030;
        integer(kind=8) D.5031;
        integer(kind=8) D.5032;
        integer(kind=4) D.5033;
        integer(kind=8) D.5034;
        integer(kind=8) D.5035;
        integer(kind=4) D.5036;
        integer(kind=8) D.5037;
        unsigned long size.161;
        logical(kind=4) D.5039;
        integer(kind=4) overflow.162;
        logical(kind=4) not_prev_allocated.163;
        integer(kind=8) D.5087;
        integer(kind=4) D.5088;
        integer(kind=8) D.5089;
        integer(kind=8) D.5090;
        integer(kind=4) D.5091;
        integer(kind=8) D.5092;
        integer(kind=8) D.5093;
        integer(kind=4) D.5094;
        integer(kind=8) D.5095;
        unsigned long size.176;
        logical(kind=4) D.5097;
        integer(kind=4) overflow.177;
        logical(kind=4) not_prev_allocated.178;
        integer(kind=8) D.5100;
        integer(kind=4) D.5101;
        integer(kind=8) D.5102;
        integer(kind=8) D.5103;
        integer(kind=4) D.5104;
        integer(kind=8) D.5105;
        integer(kind=8) D.5106;
        integer(kind=4) D.5107;
        integer(kind=8) D.5108;
        unsigned long size.179;
        logical(kind=4) D.5110;
        integer(kind=4) overflow.180;
        logical(kind=4) not_prev_allocated.181;
        integer(kind=8) D.5113;
        integer(kind=4) D.5114;
        integer(kind=8) D.5115;
        integer(kind=8) D.5116;
        integer(kind=4) D.5117;
        integer(kind=8) D.5118;
        integer(kind=8) D.5119;
        integer(kind=4) D.5120;
        integer(kind=8) D.5121;
        unsigned long size.182;
        logical(kind=4) D.5123;
        integer(kind=4) overflow.183;
        logical(kind=4) not_prev_allocated.184;

        {
          integer(kind=8) D.4671;
          struct array01_integer(kind=4) parm.82;
          integer(kind=8) D.4678;

          D.4671 = ubound.0;
          parm.82.span = 4;
          parm.82.dtype = {.elem_len=4, .rank=1, .type=1};
          D.4678 = stride.1;
          parm.82.dim[0].lbound = 1;
          parm.82.dim[0].ubound = D.4671;
          parm.82.dim[0].stride = NON_LVALUE_EXPR <D.4678>;
          parm.82.data = 0B;
          parm.82.offset = -NON_LVALUE_EXPR <D.4678>;
          nuniqueorb = (integer(kind=4)) MAX_EXPR <(parm.82.dim[0].ubound - parm.82.dim[0].lbound) + 1, 0>;
        }
        {
          integer(kind=8) D.4687;
          integer(kind=8) D.4688;
          integer(kind=4) D.4689;
          integer(kind=8) D.4690;
          integer(kind=8) D.4691;
          integer(kind=4) D.4692;
          integer(kind=8) D.4693;
          integer(kind=8) D.4694;
          integer(kind=4) D.4695;
          integer(kind=8) D.4696;
          unsigned long size.85;
          logical(kind=4) D.4698;
          integer(kind=4) overflow.86;
          logical(kind=4) not_prev_allocated.87;

          {
            integer(kind=4) limit.83;
            integer(kind=8) D.4682;
            integer(kind=8) D.4683;

            limit.83 = -2147483648;
            D.4682 = offset.2;
            D.4683 = ubound.0;
            {
              integer(kind=8) S.84;
              integer(kind=8) D.4685;

              D.4685 = stride.1;
              S.84 = 1;
              while (1)
                {
                  if (S.84 > D.4683) goto L.2;
                  limit.83 = MAX_EXPR <*((integer(kind=4) *) angmoms.0 + (sizetype) ((S.84 * D.4685 + D.4682) * 4)), limit.83>;
                  S.84 = S.84 + 1;
                }
              L.2:;
            }
            __var_1_fcn = limit.83;
          }
          cacheindexmap.dtype = {.elem_len=4, .rank=2, .type=1};
          D.4687 = (integer(kind=8)) __var_1_fcn;
          D.4688 = MAX_EXPR <D.4687 - (integer(kind=8)) -__var_1_fcn, -1> + 1;
          D.4689 = NON_LVALUE_EXPR <__builtin_expect ((integer(kind=8)) (D.4688 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.4688 <= 0), 0, 41) ? 1 : 0>;
          D.4690 = NON_LVALUE_EXPR <D.4688>;
          D.4691 = (integer(kind=8)) MAX_EXPR <nuniqueorb, 0>;
          D.4692 = (__builtin_expect ((integer(kind=8)) (D.4691 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.4691 < D.4690), 0, 41) ? 1 : 0) + D.4689;
          D.4693 = D.4690 * D.4691;
          D.4694 = D.4693;
          D.4695 = (__builtin_expect ((integer(kind=8)) ((unsigned long) D.4693 > 4611686018427387903), 0, 41) ? 1 : 0) + D.4692;
          D.4696 = (integer(kind=8)) __var_1_fcn - NON_LVALUE_EXPR <D.4690>;
          D.4698 = D.4687 - (integer(kind=8)) -__var_1_fcn < 0 || nuniqueorb <= 0;
          if (D.4698)
            {
              size.85 = 0;
            }
          else
            {
              size.85 = (unsigned long) D.4693 * 4;
            }
          overflow.86 = D.4695;
          not_prev_allocated.87 = cacheindexmap.data == 0B;
          if (__builtin_expect ((integer(kind=8)) (overflow.86 != 0), 0, 41))
            {
              _gfortran_runtime_error (&"Integer overflow when calculating the amount of memory to allocate"[1]{lb: 1 sz: 1});
            }
          else
            {
              if (__builtin_expect ((integer(kind=8)) (cacheindexmap.data != 0B), 0, 43))
                {
                  _gfortran_runtime_error_at (&"At line 168 of file /home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1}, &"Attempting to allocate already allocated variable \'%s\'"[1]{lb: 1 sz: 1}, &"cacheindexmap"[1]{lb: 1 sz: 1});
                }
              else
                {
                  cacheindexmap.data = (void * restrict) __builtin_malloc (MAX_EXPR <size.85, 1>);
                  if (__builtin_expect ((integer(kind=8)) (cacheindexmap.data == 0B), 0, 42))
                    {
                      _gfortran_os_error_at (&"In file \'/home/merlin/tmpfs/dftbuild/app/waveplot/molorb2.f90\', around line 169"[1]{lb: 1 sz: 1}, &"Error allocating %lu bytes"[1]{lb: 1 sz: 1}, size.85);
                    }
                }
            }
          cacheindexmap.dim[0].lbound = (integer(kind=8)) -__var_1_fcn;
          cacheindexmap.dim[0].ubound = D.4687;
          cacheindexmap.dim[0].stride = 1;
          cacheindexmap.dim[1].lbound = 1;
          cacheindexmap.dim[1].ubound = (integer(kind=8)) nuniqueorb;
          cacheindexmap.dim[1].stride = D.4690;
          cacheindexmap.offset = D.4696;
          cacheindexmap.span = 4;
        }
        L.1:;
        {
          integer(kind=4)[0:] * restrict D.4701;
          integer(kind=8) D.4702;
          integer(kind=8) D.4703;
          integer(kind=8) D.4704;
          integer(kind=8) D.4705;
          integer(kind=8) D.4706;

          D.4701 = (integer(kind=4)[0:] * restrict) cacheindexmap.data;
          D.4702 = cacheindexmap.offset;
          D.4703 = cacheindexmap.dim[0].lbound;
          D.4704 = cacheindexmap.dim[0].ubound;
          D.4705 = cacheindexmap.dim[1].lbound;
          D.4706 = cacheindexmap.dim[1].ubound;
          {
            integer(kind=8) S.88;

            S.88 = D.4705;
            while (1)
              {
                if (S.88 > D.4706) goto L.4;
                {
                  integer(kind=8) S.89;
                  integer(kind=8) D.4709;

                  D.4709 = cacheindexmap.dim[1].stride * S.88 + D.4702;
                  S.89 = D.4703;
                  while (1)
                    {
                      if (S.89 > D.4704) goto L.3;
                      (*D.4701)[S.89 + D.4709] = -1;
                      S.89 = S.89 + 1;
                    }
                  L.3:;
                }
                S.88 = S.88 + 1;
              }
            L.4:;
          }
        }
        cacheind = 1;
        {
          struct __st_parameter_dt dt_parm.90;

          dt_parm.90.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.90.common.line = 174;
          dt_parm.90.common.flags = 128;
          dt_parm.90.common.unit = 6;
          _gfortran_st_write (&dt_parm.90);
          _gfortran_transfer_character_write (&dt_parm.90, &"nUniqueOrb"[1]{lb: 1 sz: 1}, 10);
          _gfortran_transfer_integer_write (&dt_parm.90, &nuniqueorb, 4);
          _gfortran_st_write_done (&dt_parm.90);
        }
        {
          integer(kind=4) D.4713;

          D.4713 = nuniqueorb;
          iorb = 1;
          while (1)
            {
              {
                logical(kind=4) D.4716;

                D.4716 = iorb > D.4713;
                if (D.4716) goto L.6;
                il = *((integer(kind=4) *) angmoms.0 + (sizetype) (((integer(kind=8)) iorb * stride.1 + offset.2) * 4));
                {
                  integer(kind=4) D.4717;
                  integer(kind=4) D.4718;

                  D.4717 = -il;
                  D.4718 = il;
                  im = D.4717;
                  while (1)
                    {
                      {
                        logical(kind=4) D.4721;

                        D.4721 = im > D.4718;
                        if (D.4721) goto L.8;
                        cacheind = cacheind + 1;
                        (*(integer(kind=4)[0:] * restrict) cacheindexmap.data)[(cacheindexmap.offset + (integer(kind=8)) iorb * cacheindexmap.dim[1].stride) + (integer(kind=8)) im] = cacheind;
                        L.7:;
                        im = im + 1;
                      }
                    }
                  L.8:;
                }
                L.5:;
                iorb = iorb + 1;
              }
            }
          L.6:;
        }
        cachesize = cacheind;
        if (*treal)
          {
            {
              integer(kind=8) S.91;

              S.91 = 0;
              while (1)
                {
                  if (S.91 > 3) goto L.10;
                  {
                    integer(kind=8) D.4724;
                    integer(kind=8) D.4725;
                    integer(kind=8) D.4726;
                    integer(kind=8) D.4727;
                    struct array04_real(kind=8) parm.92;
                    integer(kind=8) D.4734;
                    integer(kind=8) D.4735;
                    integer(kind=8) D.4736;
                    integer(kind=8) D.4737;

                    D.4724 = ubound.72;
                    D.4725 = ubound.74;
                    D.4726 = ubound.76;
                    D.4727 = ubound.78;
                    parm.92.span = 8;
                    parm.92.dtype = {.elem_len=8, .rank=4, .type=3};
                    D.4734 = stride.73;
                    parm.92.dim[0].lbound = 1;
                    parm.92.dim[0].ubound = D.4724;
                    parm.92.dim[0].stride = NON_LVALUE_EXPR <D.4734>;
                    D.4735 = stride.75;
                    parm.92.dim[1].lbound = 1;
                    parm.92.dim[1].ubound = D.4725;
                    parm.92.dim[1].stride = NON_LVALUE_EXPR <D.4735>;
                    D.4736 = stride.77;
                    parm.92.dim[2].lbound = 1;
                    parm.92.dim[2].ubound = D.4726;
                    parm.92.dim[2].stride = NON_LVALUE_EXPR <D.4736>;
                    D.4737 = stride.79;
                    parm.92.dim[3].lbound = 1;
                    parm.92.dim[3].ubound = D.4727;
                    parm.92.dim[3].stride = NON_LVALUE_EXPR <D.4737>;
                    parm.92.data = (void *) valuereal.0;
                    parm.92.offset = ((-NON_LVALUE_EXPR <D.4734> - NON_LVALUE_EXPR <D.4735>) - NON_LVALUE_EXPR <D.4736>) - NON_LVALUE_EXPR <D.4737>;
                    npoints[S.91] = (integer(kind=4)) MAX_EXPR <(parm.92.dim[S.91].ubound - parm.92.dim[S.91].lbound) + 1, 0>;
                  }
                  S.91 = S.91 + 1;
                }
              L.10:;
            }
          }
        else
          {
            {
              integer(kind=8) S.93;

              S.93 = 0;
              while (1)
                {
                  if (S.93 > 3) goto L.11;
                  {
                    integer(kind=8) D.4740;
                    integer(kind=8) D.4741;
                    integer(kind=8) D.4742;
                    integer(kind=8) D.4743;
                    struct array04_complex(kind=8) parm.94;
                    integer(kind=8) D.4750;
                    integer(kind=8) D.4751;
                    integer(kind=8) D.4752;
                    integer(kind=8) D.4753;

                    D.4740 = ubound.62;
                    D.4741 = ubound.64;
                    D.4742 = ubound.66;
                    D.4743 = ubound.68;
                    parm.94.span = 16;
                    parm.94.dtype = {.elem_len=16, .rank=4, .type=4};
                    D.4750 = stride.63;
                    parm.94.dim[0].lbound = 1;
                    parm.94.dim[0].ubound = D.4740;
                    parm.94.dim[0].stride = NON_LVALUE_EXPR <D.4750>;
                    D.4751 = stride.65;
                    parm.94.dim[1].lbound = 1;
                    parm.94.dim[1].ubound = D.4741;
                    parm.94.dim[1].stride = NON_LVALUE_EXPR <D.4751>;
                    D.4752 = stride.67;
                    parm.94.dim[2].lbound = 1;
                    parm.94.dim[2].ubound = D.4742;
                    parm.94.dim[2].stride = NON_LVALUE_EXPR <D.4752>;
                    D.4753 = stride.69;
                    parm.94.dim[3].lbound = 1;
                    parm.94.dim[3].ubound = D.4743;
                    parm.94.dim[3].stride = NON_LVALUE_EXPR <D.4753>;
                    parm.94.data = (void *) valuecmpl.0;
                    parm.94.offset = ((-NON_LVALUE_EXPR <D.4750> - NON_LVALUE_EXPR <D.4751>) - NON_LVALUE_EXPR <D.4752>) - NON_LVALUE_EXPR <D.4753>;
                    npoints[S.93] = (integer(kind=4)) MAX_EXPR <(parm.94.dim[S.93].ubound - parm.94.dim[S.93].lbound) + 1, 0>;
                  }
                  S.93 = S.93 + 1;
                }
              L.11:;
            }
            _gfortran_stop_string (&"Complex not implemented yet"[1]{lb: 1 sz: 1}, 27, 0);
          }
        L.9:;
        {
          struct array01_real(kind=8) parm.95;
          integer(kind=8) D.4784;
          integer(kind=8) D.4785;
          struct array02_real(kind=8) parm.96;
          integer(kind=8) D.4792;
          integer(kind=8) D.4793;
          struct array02_real(kind=8) * D.4794;
          real(kind=8)[0:] * restrict ifm.97;
          static integer(kind=8) C.4797 = 1;
          integer(kind=8) * D.4798;

          parm.95.span = 8;
          parm.95.dtype = {.elem_len=8, .rank=1, .type=3};
          parm.95.dim[0].lbound = 1;
          parm.95.dim[0].ubound = 3;
          parm.95.dim[0].stride = 1;
          parm.95.data = (void *) &targetresolution[0];
          parm.95.offset = -1;
          D.4784 = ubound.22;
          D.4785 = ubound.24;
          parm.96.span = 8;
          parm.96.dtype = {.elem_len=8, .rank=2, .type=3};
          D.4792 = stride.23;
          parm.96.dim[0].lbound = 1;
          parm.96.dim[0].ubound = D.4784;
          parm.96.dim[0].stride = NON_LVALUE_EXPR <D.4792>;
          D.4793 = stride.25;
          parm.96.dim[1].lbound = 1;
          parm.96.dim[1].ubound = D.4785;
          parm.96.dim[1].stride = NON_LVALUE_EXPR <D.4793>;
          parm.96.data = (void *) gridvecs.0;
          parm.96.offset = -NON_LVALUE_EXPR <D.4792> - NON_LVALUE_EXPR <D.4793>;
          D.4794 = &parm.96;
          ifm.97 = (real(kind=8)[0:] * restrict) D.4794->data;
          D.4798 = &C.4797;
          _gfortran_norm2_r8 (&parm.95, D.4794, D.4798);
        }
        {
          integer(kind=8) S.98;

          S.98 = 1;
          while (1)
            {
              if (S.98 > 3) goto L.12;
              targetresolution[S.98 + -1] = targetresolution[S.98 + -1] / 2.2e+1;
              S.98 = S.98 + 1;
            }
          L.12:;
        }
        {
          integer(kind=8) D.4801;
          integer(kind=8) D.4802;
          struct array02_real(kind=8) parm.99;
          integer(kind=8) D.4809;
          integer(kind=8) D.4810;
          struct array02_real(kind=8) * D.4811;
          real(kind=8)[0:] * restrict ifm.100;
          static integer(kind=8) C.4814 = 1;
          integer(kind=8) * D.4815;
          struct array01_real(kind=8) atmp.101;
          real(kind=8) A.102[3];

          D.4801 = ubound.22;
          D.4802 = ubound.24;
          parm.99.span = 8;
          parm.99.dtype = {.elem_len=8, .rank=2, .type=3};
          D.4809 = stride.23;
          parm.99.dim[0].lbound = 1;
          parm.99.dim[0].ubound = D.4801;
          parm.99.dim[0].stride = NON_LVALUE_EXPR <D.4809>;
          D.4810 = stride.25;
          parm.99.dim[1].lbound = 1;
          parm.99.dim[1].ubound = D.4802;
          parm.99.dim[1].stride = NON_LVALUE_EXPR <D.4810>;
          parm.99.data = (void *) gridvecs.0;
          parm.99.offset = -NON_LVALUE_EXPR <D.4809> - NON_LVALUE_EXPR <D.4810>;
          D.4811 = &parm.99;
          ifm.100 = (real(kind=8)[0:] * restrict) D.4811->data;
          D.4815 = &C.4814;
                    typedef real(kind=8) [3];
          atmp.101.dtype = {.elem_len=8, .rank=1, .type=3};
          atmp.101.dim[0].stride = 1;
          atmp.101.dim[0].lbound = 0;
          atmp.101.dim[0].ubound = 2;
          atmp.101.span = 8;
          atmp.101.data = (void * restrict) &A.102;
          atmp.101.offset = 0;
          _gfortran_norm2_r8 (&atmp.101, D.4811, D.4815);
          {
            integer(kind=8) S.103;

            S.103 = 0;
            while (1)
              {
                if (S.103 > 2) goto L.13;
                resolutionfactor[S.103] = (integer(kind=4)) ((*(real(kind=8)[3] * restrict) atmp.101.data)[S.103] / targetresolution[S.103]);
                S.103 = S.103 + 1;
              }
            L.13:;
          }
        }
        {
          struct __st_parameter_dt dt_parm.104;

          dt_parm.104.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.104.common.line = 194;
          dt_parm.104.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
          dt_parm.104.format_len = 11;
          dt_parm.104.common.flags = 4096;
          dt_parm.104.common.unit = 6;
          _gfortran_st_write (&dt_parm.104);
          _gfortran_transfer_character_write (&dt_parm.104, &"Target Resolution:"[1]{lb: 1 sz: 1}, 18);
          {
            struct array01_real(kind=8) parm.105;

            parm.105.span = 8;
            parm.105.dtype = {.elem_len=8, .rank=1, .type=3};
            parm.105.dim[0].lbound = 1;
            parm.105.dim[0].ubound = 3;
            parm.105.dim[0].stride = 1;
            parm.105.data = (void *) &targetresolution[0];
            parm.105.offset = -1;
            _gfortran_transfer_array_write (&dt_parm.104, &parm.105, 8, 0);
          }
          _gfortran_st_write_done (&dt_parm.104);
        }
        {
          struct __st_parameter_dt dt_parm.106;

          dt_parm.106.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.106.common.line = 195;
          dt_parm.106.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
          dt_parm.106.format_len = 11;
          dt_parm.106.common.flags = 4096;
          dt_parm.106.common.unit = 6;
          _gfortran_st_write (&dt_parm.106);
          _gfortran_transfer_character_write (&dt_parm.106, &"Resolution Factors:"[1]{lb: 1 sz: 1}, 19);
          {
            struct array01_integer(kind=4) parm.107;

            parm.107.span = 4;
            parm.107.dtype = {.elem_len=4, .rank=1, .type=1};
            parm.107.dim[0].lbound = 1;
            parm.107.dim[0].ubound = 3;
            parm.107.dim[0].stride = 1;
            parm.107.data = (void *) &resolutionfactor[0];
            parm.107.offset = -1;
            _gfortran_transfer_array_write (&dt_parm.106, &parm.107, 4, 0);
          }
          _gfortran_st_write_done (&dt_parm.106);
        }
        {
          integer(kind=8) D.4840;
          integer(kind=8) D.4841;
          real(kind=8) D.4842;

          D.4840 = offset.26;
          D.4841 = ubound.22;
          D.4842 = (real(kind=8)) resolutionfactor[0];
          {
            integer(kind=8) S.108;
            integer(kind=8) D.4844;
            integer(kind=8) D.4845;

            D.4844 = stride.23;
            D.4845 = D.4840 + NON_LVALUE_EXPR <stride.25>;
            S.108 = 1;
            while (1)
              {
                if (S.108 > 3) goto L.14;
                cachegridvecs[S.108 + -1] = *((real(kind=8) *) gridvecs.0 + (sizetype) ((S.108 * D.4844 + D.4845) * 8)) / D.4842;
                S.108 = S.108 + 1;
              }
            L.14:;
          }
        }
        {
          integer(kind=8) D.4847;
          integer(kind=8) D.4848;
          real(kind=8) D.4849;

          D.4847 = offset.26;
          D.4848 = ubound.22;
          D.4849 = (real(kind=8)) resolutionfactor[1];
          {
            integer(kind=8) S.109;
            integer(kind=8) D.4851;
            integer(kind=8) D.4852;

            D.4851 = stride.23;
            D.4852 = stride.25 * 2 + D.4847;
            S.109 = 1;
            while (1)
              {
                if (S.109 > 3) goto L.15;
                cachegridvecs[S.109 + 2] = *((real(kind=8) *) gridvecs.0 + (sizetype) ((S.109 * D.4851 + D.4852) * 8)) / D.4849;
                S.109 = S.109 + 1;
              }
            L.15:;
          }
        }
        {
          integer(kind=8) D.4854;
          integer(kind=8) D.4855;
          real(kind=8) D.4856;

          D.4854 = offset.26;
          D.4855 = ubound.22;
          D.4856 = (real(kind=8)) resolutionfactor[2];
          {
            integer(kind=8) S.110;
            integer(kind=8) D.4858;
            integer(kind=8) D.4859;

            D.4858 = stride.23;
            D.4859 = stride.25 * 3 + D.4854;
            S.110 = 1;
            while (1)
              {
                if (S.110 > 3) goto L.16;
                cachegridvecs[S.110 + 5] = *((real(kind=8) *) gridvecs.0 + (sizetype) ((S.110 * D.4858 + D.4859) * 8)) / D.4856;
                S.110 = S.110 + 1;
              }
            L.16:;
          }
        }
        {
          real(kind=8) limit.111;
          integer(kind=8) D.4863;
          integer(kind=8) D.4864;
          real(kind=8) limit.113;
          integer(kind=8) D.4871;
          integer(kind=8) D.4872;

          limit.111 =  -Inf;
          D.4863 = offset.14;
          D.4864 = ubound.12;
          {
            integer(kind=8) S.112;
            integer(kind=8) D.4867;

            D.4867 = stride.13;
            S.112 = 1;
            while (1)
              {
                if (S.112 > D.4864) goto L.19;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.112 * D.4867 + D.4863) * 8)) >= limit.111) goto L.18;
                S.112 = S.112 + 1;
              }
            L.19:;
            limit.111 = D.4864 > 0 ?  Nan : -1.79769313486231570814527423731704356798070567525844996599e+308;
            L.18:;
            while (1)
              {
                if (S.112 > D.4864) goto L.20;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.112 * D.4867 + D.4863) * 8)) > limit.111)
                  {
                    limit.111 = *((real(kind=8) *) cutoffs.0 + (sizetype) ((S.112 * D.4867 + D.4863) * 8));
                  }
                S.112 = S.112 + 1;
              }
            L.20:;
          }
          limit.113 =  Inf;
          D.4871 = offset.14;
          D.4872 = ubound.12;
          {
            integer(kind=8) S.114;
            integer(kind=8) D.4875;

            D.4875 = stride.13;
            S.114 = 1;
            while (1)
              {
                if (S.114 > D.4872) goto L.22;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.114 * D.4875 + D.4871) * 8)) <= limit.113) goto L.21;
                S.114 = S.114 + 1;
              }
            L.22:;
            limit.113 = D.4872 > 0 ?  Nan : 1.79769313486231570814527423731704356798070567525844996599e+308;
            L.21:;
            while (1)
              {
                if (S.114 > D.4872) goto L.23;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.114 * D.4875 + D.4871) * 8)) < limit.113)
                  {
                    limit.113 = *((real(kind=8) *) cutoffs.0 + (sizetype) ((S.114 * D.4875 + D.4871) * 8));
                  }
                S.114 = S.114 + 1;
              }
            L.23:;
          }
          if (limit.111 != limit.113)
            {
              {
                struct __st_parameter_dt dt_parm.115;

                dt_parm.115.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
                dt_parm.115.common.line = 204;
                dt_parm.115.common.flags = 128;
                dt_parm.115.common.unit = 6;
                _gfortran_st_write (&dt_parm.115);
                _gfortran_transfer_character_write (&dt_parm.115, &"Warn: Different cutoffs (max/min):"[1]{lb: 1 sz: 1}, 34);
                {
                  real(kind=8) limit.116;
                  integer(kind=8) D.4880;
                  integer(kind=8) D.4881;
                  real(kind=8) D.4887;

                  limit.116 =  -Inf;
                  D.4880 = offset.14;
                  D.4881 = ubound.12;
                  {
                    integer(kind=8) S.117;
                    integer(kind=8) D.4884;

                    D.4884 = stride.13;
                    S.117 = 1;
                    while (1)
                      {
                        if (S.117 > D.4881) goto L.25;
                        if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.117 * D.4884 + D.4880) * 8)) >= limit.116) goto L.24;
                        S.117 = S.117 + 1;
                      }
                    L.25:;
                    limit.116 = D.4881 > 0 ?  Nan : -1.79769313486231570814527423731704356798070567525844996599e+308;
                    L.24:;
                    while (1)
                      {
                        if (S.117 > D.4881) goto L.26;
                        if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.117 * D.4884 + D.4880) * 8)) > limit.116)
                          {
                            limit.116 = *((real(kind=8) *) cutoffs.0 + (sizetype) ((S.117 * D.4884 + D.4880) * 8));
                          }
                        S.117 = S.117 + 1;
                      }
                    L.26:;
                  }
                  D.4887 = limit.116;
                  _gfortran_transfer_real_write (&dt_parm.115, &D.4887, 8);
                }
                {
                  real(kind=8) limit.118;
                  integer(kind=8) D.4889;
                  integer(kind=8) D.4890;
                  real(kind=8) D.4896;

                  limit.118 =  Inf;
                  D.4889 = offset.14;
                  D.4890 = ubound.12;
                  {
                    integer(kind=8) S.119;
                    integer(kind=8) D.4893;

                    D.4893 = stride.13;
                    S.119 = 1;
                    while (1)
                      {
                        if (S.119 > D.4890) goto L.28;
                        if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.119 * D.4893 + D.4889) * 8)) <= limit.118) goto L.27;
                        S.119 = S.119 + 1;
                      }
                    L.28:;
                    limit.118 = D.4890 > 0 ?  Nan : 1.79769313486231570814527423731704356798070567525844996599e+308;
                    L.27:;
                    while (1)
                      {
                        if (S.119 > D.4890) goto L.29;
                        if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.119 * D.4893 + D.4889) * 8)) < limit.118)
                          {
                            limit.118 = *((real(kind=8) *) cutoffs.0 + (sizetype) ((S.119 * D.4893 + D.4889) * 8));
                          }
                        S.119 = S.119 + 1;
                      }
                    L.29:;
                  }
                  D.4896 = limit.118;
                  _gfortran_transfer_real_write (&dt_parm.115, &D.4896, 8);
                }
                _gfortran_st_write_done (&dt_parm.115);
              }
            }
        }
        L.17:;
        {
          real(kind=8) limit.120;
          integer(kind=8) D.4898;
          integer(kind=8) D.4899;
          real(kind=8) val.122;
          real(kind=8) scale.123;
          integer(kind=4) D.4911;
          integer(kind=4) M.127;
          integer(kind=4) D.4913;

          limit.120 =  -Inf;
          D.4898 = offset.14;
          D.4899 = ubound.12;
          {
            integer(kind=8) S.121;
            integer(kind=8) D.4902;

            D.4902 = stride.13;
            S.121 = 1;
            while (1)
              {
                if (S.121 > D.4899) goto L.31;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.121 * D.4902 + D.4898) * 8)) >= limit.120) goto L.30;
                S.121 = S.121 + 1;
              }
            L.31:;
            limit.120 = D.4899 > 0 ?  Nan : -1.79769313486231570814527423731704356798070567525844996599e+308;
            L.30:;
            while (1)
              {
                if (S.121 > D.4899) goto L.32;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.121 * D.4902 + D.4898) * 8)) > limit.120)
                  {
                    limit.120 = *((real(kind=8) *) cutoffs.0 + (sizetype) ((S.121 * D.4902 + D.4898) * 8));
                  }
                S.121 = S.121 + 1;
              }
            L.32:;
          }
          scale.123 = 1.0e+0;
          val.122 = 0.0;
          {
            integer(kind=8) S.124;

            S.124 = 1;
            while (1)
              {
                if (S.124 > 3) goto L.33;
                {
                  real(kind=8) absX.125;
                  real(kind=8) val.126;

                  if (cachegridvecs[S.124 + -1] != 0.0)
                    {
                      absX.125 = ABS_EXPR <cachegridvecs[S.124 + -1]>;
                      if (absX.125 > scale.123)
                        {
                          val.126 = scale.123 / absX.125;
                          val.122 = (val.126 * val.126) * val.122 + 1.0e+0;
                          scale.123 = absX.125;
                        }
                      else
                        {
                          val.126 = absX.125 / scale.123;
                          val.122 = val.126 * val.126 + val.122;
                        }
                    }
                }
                S.124 = S.124 + 1;
              }
            L.33:;
          }
          D.4911 = (integer(kind=4)) (limit.120 / (__builtin_sqrt (val.122) * scale.123));
          M.127 = D.4911;
          D.4913 = npoints[0];
          M.127 = MIN_EXPR <D.4913, M.127>;
          npointshalved[0] = M.127;
        }
        {
          real(kind=8) limit.128;
          integer(kind=8) D.4915;
          integer(kind=8) D.4916;
          real(kind=8) val.130;
          real(kind=8) scale.131;
          integer(kind=4) D.4928;
          integer(kind=4) M.135;
          integer(kind=4) D.4930;

          limit.128 =  -Inf;
          D.4915 = offset.14;
          D.4916 = ubound.12;
          {
            integer(kind=8) S.129;
            integer(kind=8) D.4919;

            D.4919 = stride.13;
            S.129 = 1;
            while (1)
              {
                if (S.129 > D.4916) goto L.35;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.129 * D.4919 + D.4915) * 8)) >= limit.128) goto L.34;
                S.129 = S.129 + 1;
              }
            L.35:;
            limit.128 = D.4916 > 0 ?  Nan : -1.79769313486231570814527423731704356798070567525844996599e+308;
            L.34:;
            while (1)
              {
                if (S.129 > D.4916) goto L.36;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.129 * D.4919 + D.4915) * 8)) > limit.128)
                  {
                    limit.128 = *((real(kind=8) *) cutoffs.0 + (sizetype) ((S.129 * D.4919 + D.4915) * 8));
                  }
                S.129 = S.129 + 1;
              }
            L.36:;
          }
          scale.131 = 1.0e+0;
          val.130 = 0.0;
          {
            integer(kind=8) S.132;

            S.132 = 1;
            while (1)
              {
                if (S.132 > 3) goto L.37;
                {
                  real(kind=8) absX.133;
                  real(kind=8) val.134;

                  if (cachegridvecs[S.132 + 2] != 0.0)
                    {
                      absX.133 = ABS_EXPR <cachegridvecs[S.132 + 2]>;
                      if (absX.133 > scale.131)
                        {
                          val.134 = scale.131 / absX.133;
                          val.130 = (val.134 * val.134) * val.130 + 1.0e+0;
                          scale.131 = absX.133;
                        }
                      else
                        {
                          val.134 = absX.133 / scale.131;
                          val.130 = val.134 * val.134 + val.130;
                        }
                    }
                }
                S.132 = S.132 + 1;
              }
            L.37:;
          }
          D.4928 = (integer(kind=4)) (limit.128 / (__builtin_sqrt (val.130) * scale.131));
          M.135 = D.4928;
          D.4930 = npoints[1];
          M.135 = MIN_EXPR <D.4930, M.135>;
          npointshalved[1] = M.135;
        }
        {
          real(kind=8) limit.136;
          integer(kind=8) D.4932;
          integer(kind=8) D.4933;
          real(kind=8) val.138;
          real(kind=8) scale.139;
          integer(kind=4) D.4945;
          integer(kind=4) M.143;
          integer(kind=4) D.4947;

          limit.136 =  -Inf;
          D.4932 = offset.14;
          D.4933 = ubound.12;
          {
            integer(kind=8) S.137;
            integer(kind=8) D.4936;

            D.4936 = stride.13;
            S.137 = 1;
            while (1)
              {
                if (S.137 > D.4933) goto L.39;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.137 * D.4936 + D.4932) * 8)) >= limit.136) goto L.38;
                S.137 = S.137 + 1;
              }
            L.39:;
            limit.136 = D.4933 > 0 ?  Nan : -1.79769313486231570814527423731704356798070567525844996599e+308;
            L.38:;
            while (1)
              {
                if (S.137 > D.4933) goto L.40;
                if (*((real(kind=8) *) cutoffs.0 + (sizetype) ((S.137 * D.4936 + D.4932) * 8)) > limit.136)
                  {
                    limit.136 = *((real(kind=8) *) cutoffs.0 + (sizetype) ((S.137 * D.4936 + D.4932) * 8));
                  }
                S.137 = S.137 + 1;
              }
            L.40:;
          }
          scale.139 = 1.0e+0;
          val.138 = 0.0;
          {
            integer(kind=8) S.140;

            S.140 = 1;
            while (1)
              {
                if (S.140 > 3) goto L.41;
                {
                  real(kind=8) absX.141;
                  real(kind=8) val.142;

                  if (cachegridvecs[S.140 + 5] != 0.0)
                    {
                      absX.141 = ABS_EXPR <cachegridvecs[S.140 + 5]>;
                      if (absX.141 > scale.139)
                        {
                          val.142 = scale.139 / absX.141;
                          val.138 = (val.142 * val.142) * val.138 + 1.0e+0;
                          scale.139 = absX.141;
                        }
                      else
                        {
                          val.142 = absX.141 / scale.139;
                          val.138 = val.142 * val.142 + val.138;
                        }
                    }
                }
                S.140 = S.140 + 1;
              }
            L.41:;
          }
          D.4945 = (integer(kind=4)) (limit.136 / (__builtin_sqrt (val.138) * scale.139));
          M.143 = D.4945;
          D.4947 = npoints[2];
          M.143 = MIN_EXPR <D.4947, M.143>;
          npointshalved[2] = M.143;
        }
        {
          struct __st_parameter_dt dt_parm.144;

          dt_parm.144.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.144.common.line = 224;
          dt_parm.144.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
          dt_parm.144.format_len = 11;
          dt_parm.144.common.flags = 4096;
          dt_parm.144.common.unit = 6;
          _gfortran_st_write (&dt_parm.144);
          _gfortran_transfer_character_write (&dt_parm.144, &"Main Grid Dimensions"[1]{lb: 1 sz: 1}, 20);
          {
            struct array01_integer(kind=4) parm.145;

            parm.145.span = 4;
            parm.145.dtype = {.elem_len=4, .rank=1, .type=1};
            parm.145.dim[0].lbound = 1;
            parm.145.dim[0].ubound = 4;
            parm.145.dim[0].stride = 1;
            parm.145.data = (void *) &npoints[0];
            parm.145.offset = -1;
            _gfortran_transfer_array_write (&dt_parm.144, &parm.145, 4, 0);
          }
          _gfortran_st_write_done (&dt_parm.144);
        }
        {
          struct __st_parameter_dt dt_parm.146;

          dt_parm.146.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.146.common.line = 225;
          dt_parm.146.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
          dt_parm.146.format_len = 11;
          dt_parm.146.common.flags = 4096;
          dt_parm.146.common.unit = 6;
          _gfortran_st_write (&dt_parm.146);
          _gfortran_transfer_character_write (&dt_parm.146, &" ->"[1]{lb: 1 sz: 1}, 3);
          {
            integer(kind=8) D.4956;
            integer(kind=8) D.4957;
            integer(kind=8) D.4958;
            integer(kind=8) D.4959;
            struct array04_real(kind=8) parm.147;
            integer(kind=8) D.4966;
            integer(kind=8) D.4967;
            integer(kind=8) D.4968;
            integer(kind=8) D.4969;
            integer(kind=8) size.148;
            integer(kind=8) extent.149;
            signed char idx.150;
            integer(kind=4) D.4975;

            D.4956 = ubound.72;
            D.4957 = ubound.74;
            D.4958 = ubound.76;
            D.4959 = ubound.78;
            parm.147.span = 8;
            parm.147.dtype = {.elem_len=8, .rank=4, .type=3};
            D.4966 = stride.73;
            parm.147.dim[0].lbound = 1;
            parm.147.dim[0].ubound = D.4956;
            parm.147.dim[0].stride = NON_LVALUE_EXPR <D.4966>;
            D.4967 = stride.75;
            parm.147.dim[1].lbound = 1;
            parm.147.dim[1].ubound = D.4957;
            parm.147.dim[1].stride = NON_LVALUE_EXPR <D.4967>;
            D.4968 = stride.77;
            parm.147.dim[2].lbound = 1;
            parm.147.dim[2].ubound = D.4958;
            parm.147.dim[2].stride = NON_LVALUE_EXPR <D.4968>;
            D.4969 = stride.79;
            parm.147.dim[3].lbound = 1;
            parm.147.dim[3].ubound = D.4959;
            parm.147.dim[3].stride = NON_LVALUE_EXPR <D.4969>;
            parm.147.data = 0B;
            parm.147.offset = ((-NON_LVALUE_EXPR <D.4966> - NON_LVALUE_EXPR <D.4967>) - NON_LVALUE_EXPR <D.4968>) - NON_LVALUE_EXPR <D.4969>;
            size.148 = 1;
            idx.150 = 0;
            goto L.43;
            L.42:;
            extent.149 = (parm.147.dim[idx.150].ubound - parm.147.dim[idx.150].lbound) + 1;
            if (extent.149 < 0)
              {
                extent.149 = 0;
              }
            size.148 = size.148 * extent.149;
            idx.150 = idx.150 + 1;
            L.43:;
            if (idx.150 <= 3) goto L.42;
            D.4975 = (integer(kind=4)) size.148;
            _gfortran_transfer_integer_write (&dt_parm.146, &D.4975, 4);
          }
          _gfortran_transfer_character_write (&dt_parm.146, &"elements,"[1]{lb: 1 sz: 1}, 9);
          {
            integer(kind=8) D.4976;
            integer(kind=8) D.4977;
            integer(kind=8) D.4978;
            integer(kind=8) D.4979;
            struct array04_real(kind=8) parm.151;
            integer(kind=8) D.4986;
            integer(kind=8) D.4987;
            integer(kind=8) D.4988;
            integer(kind=8) D.4989;
            integer(kind=8) bytes.152;
            real(kind=4) D.4991;

            D.4976 = ubound.72;
            D.4977 = ubound.74;
            D.4978 = ubound.76;
            D.4979 = ubound.78;
            parm.151.span = 8;
            parm.151.dtype = {.elem_len=8, .rank=4, .type=3};
            D.4986 = stride.73;
            parm.151.dim[0].lbound = 1;
            parm.151.dim[0].ubound = D.4976;
            parm.151.dim[0].stride = NON_LVALUE_EXPR <D.4986>;
            D.4987 = stride.75;
            parm.151.dim[1].lbound = 1;
            parm.151.dim[1].ubound = D.4977;
            parm.151.dim[1].stride = NON_LVALUE_EXPR <D.4987>;
            D.4988 = stride.77;
            parm.151.dim[2].lbound = 1;
            parm.151.dim[2].ubound = D.4978;
            parm.151.dim[2].stride = NON_LVALUE_EXPR <D.4988>;
            D.4989 = stride.79;
            parm.151.dim[3].lbound = 1;
            parm.151.dim[3].ubound = D.4979;
            parm.151.dim[3].stride = NON_LVALUE_EXPR <D.4989>;
            parm.151.data = (void *) valuereal.0;
            parm.151.offset = ((-NON_LVALUE_EXPR <D.4986> - NON_LVALUE_EXPR <D.4987>) - NON_LVALUE_EXPR <D.4988>) - NON_LVALUE_EXPR <D.4989>;
            bytes.152 = 8;
            bytes.152 = (MAX_EXPR <parm.151.dim[0].ubound - parm.151.dim[0].lbound, -1> + 1) * bytes.152;
            bytes.152 = (MAX_EXPR <parm.151.dim[1].ubound - parm.151.dim[1].lbound, -1> + 1) * bytes.152;
            bytes.152 = (MAX_EXPR <parm.151.dim[2].ubound - parm.151.dim[2].lbound, -1> + 1) * bytes.152;
            bytes.152 = (MAX_EXPR <parm.151.dim[3].ubound - parm.151.dim[3].lbound, -1> + 1) * bytes.152;
            D.4991 = ((real(kind=4)) bytes.152 / 1.0e+3) / 1.0e+3;
            _gfortran_transfer_real_write (&dt_parm.146, &D.4991, 4);
          }
          _gfortran_transfer_character_write (&dt_parm.146, &"MB"[1]{lb: 1 sz: 1}, 2);
          _gfortran_st_write_done (&dt_parm.146);
        }
        if (tcacheinitialised)
          {
            {
              struct __st_parameter_dt dt_parm.153;

              dt_parm.153.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
              dt_parm.153.common.line = 230;
              dt_parm.153.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
              dt_parm.153.format_len = 11;
              dt_parm.153.common.flags = 4096;
              dt_parm.153.common.unit = 6;
              _gfortran_st_write (&dt_parm.153);
              _gfortran_transfer_character_write (&dt_parm.153, &"Reusing saved wavefunctions"[1]{lb: 1 sz: 1}, 27);
              _gfortran_st_write_done (&dt_parm.153);
            }
            goto __label_000591;
          }
        L.44:;
        expectedsizemb = 0.0;
        {
          integer(kind=4) val.154;

          val.154 = 1;
          {
            integer(kind=8) S.155;

            S.155 = 1;
            while (1)
              {
                if (S.155 > 3) goto L.45;
                val.154 = npointshalved[S.155 + -1] * val.154;
                S.155 = S.155 + 1;
              }
            L.45:;
          }
          expectedsizemb = (real(kind=8)) (val.154 * 64);
        }
        {
          integer(kind=4) val.156;

          val.156 = 1;
          {
            integer(kind=8) S.157;

            S.157 = 1;
            while (1)
              {
                if (S.157 > 3) goto L.46;
                val.156 = resolutionfactor[S.157 + -1] * val.156;
                S.157 = S.157 + 1;
              }
            L.46:;
          }
          expectedsizemb = ((expectedsizemb * 8.0e+0) * (real(kind=8)) val.156) * (real(kind=8)) cachesize;
        }
        expectedsizemb = ((expectedsizemb * 1.25e-1) * 9.765625e-4) * 9.765625e-4;
        {
          struct __st_parameter_dt dt_parm.158;

          dt_parm.158.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.158.common.line = 240;
          dt_parm.158.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
          dt_parm.158.format_len = 11;
          dt_parm.158.common.flags = 4096;
          dt_parm.158.common.unit = 6;
          _gfortran_st_write (&dt_parm.158);
          _gfortran_transfer_character_write (&dt_parm.158, &"Allocating Cache Grid of dimensions"[1]{lb: 1 sz: 1}, 35);
          {
            integer(kind=8) S.159;

            S.159 = 1;
            while (1)
              {
                if (S.159 > 3) goto L.47;
                {
                  integer(kind=4) D.5003;

                  D.5003 = npointshalved[S.159 + -1] * 2;
                  _gfortran_transfer_integer_write (&dt_parm.158, &D.5003, 4);
                }
                S.159 = S.159 + 1;
              }
            L.47:;
          }
          _gfortran_st_write_done (&dt_parm.158);
        }
        {
          struct __st_parameter_dt dt_parm.160;

          dt_parm.160.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.160.common.line = 241;
          dt_parm.160.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
          dt_parm.160.format_len = 11;
          dt_parm.160.common.flags = 4096;
          dt_parm.160.common.unit = 6;
          _gfortran_st_write (&dt_parm.160);
          _gfortran_transfer_character_write (&dt_parm.160, &"expected Cache Allocation Size"[1]{lb: 1 sz: 1}, 30);
          _gfortran_transfer_real_write (&dt_parm.160, &expectedsizemb, 8);
          _gfortran_transfer_character_write (&dt_parm.160, &"MB"[1]{lb: 1 sz: 1}, 2);
          _gfortran_st_write_done (&dt_parm.160);
        }
        if (expectedsizemb > 8.0e+3)
          {
            _gfortran_stop_string (&"Expected cache array size exceeds 8GB"[1]{lb: 1 sz: 1}, 37, 0);
          }
        L.48:;
        wavefunctioncache.dtype = {.elem_len=8, .rank=7, .type=3};
        D.5007 = (integer(kind=8)) npointshalved[0];
        D.5008 = MAX_EXPR <D.5007 - (integer(kind=8)) -npointshalved[0], -1> + 1;
        D.5009 = NON_LVALUE_EXPR <__builtin_expect ((integer(kind=8)) (D.5008 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5008 <= 0), 0, 41) ? 1 : 0>;
        D.5010 = NON_LVALUE_EXPR <D.5008>;
        D.5011 = (integer(kind=8)) (resolutionfactor[0] + -1);
        D.5012 = MAX_EXPR <NON_LVALUE_EXPR <D.5011>, -1> + 1;
        D.5013 = (__builtin_expect ((integer(kind=8)) (D.5012 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5012 < D.5010), 0, 41) ? 1 : 0) + D.5009;
        D.5014 = D.5010 * D.5012;
        D.5015 = (integer(kind=8)) npointshalved[1];
        D.5016 = MAX_EXPR <D.5015 - (integer(kind=8)) -npointshalved[1], -1> + 1;
        D.5017 = (__builtin_expect ((integer(kind=8)) (D.5016 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5016 < D.5014), 0, 41) ? 1 : 0) + D.5013;
        D.5018 = D.5014 * D.5016;
        D.5019 = (integer(kind=8)) (resolutionfactor[1] + -1);
        D.5020 = MAX_EXPR <NON_LVALUE_EXPR <D.5019>, -1> + 1;
        D.5021 = (__builtin_expect ((integer(kind=8)) (D.5020 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5020 < D.5018), 0, 41) ? 1 : 0) + D.5017;
        D.5022 = D.5018 * D.5020;
        D.5023 = (integer(kind=8)) npointshalved[2];
        D.5024 = MAX_EXPR <D.5023 - (integer(kind=8)) -npointshalved[2], -1> + 1;
        D.5025 = (__builtin_expect ((integer(kind=8)) (D.5024 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5024 < D.5022), 0, 41) ? 1 : 0) + D.5021;
        D.5026 = D.5022 * D.5024;
        D.5027 = (integer(kind=8)) (resolutionfactor[2] + -1);
        D.5028 = MAX_EXPR <NON_LVALUE_EXPR <D.5027>, -1> + 1;
        D.5029 = (__builtin_expect ((integer(kind=8)) (D.5028 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5028 < D.5026), 0, 41) ? 1 : 0) + D.5025;
        D.5030 = D.5026 * D.5028;
        D.5031 = (integer(kind=8)) cachesize;
        D.5032 = MAX_EXPR <NON_LVALUE_EXPR <D.5031>, 0>;
        D.5033 = (__builtin_expect ((integer(kind=8)) (D.5032 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5032 < D.5030), 0, 41) ? 1 : 0) + D.5029;
        D.5034 = D.5030 * D.5032;
        D.5035 = D.5034;
        D.5036 = (__builtin_expect ((integer(kind=8)) ((unsigned long) D.5034 > 2305843009213693951), 0, 41) ? 1 : 0) + D.5033;
        D.5037 = (((integer(kind=8)) npointshalved[0] - (integer(kind=8)) -npointshalved[1] * D.5014) - (integer(kind=8)) -npointshalved[2] * D.5022) - NON_LVALUE_EXPR <D.5030>;
        D.5039 = (((((D.5007 - (integer(kind=8)) -npointshalved[0] < 0 || NON_LVALUE_EXPR <D.5011> < 0) || D.5015 - (integer(kind=8)) -npointshalved[1] < 0) || NON_LVALUE_EXPR <D.5019> < 0) || D.5023 - (integer(kind=8)) -npointshalved[2] < 0) || NON_LVALUE_EXPR <D.5027> < 0) || NON_LVALUE_EXPR <D.5031> <= 0;
        if (D.5039)
          {
            size.161 = 0;
          }
        else
          {
            size.161 = (unsigned long) D.5034 * 8;
          }
        overflow.162 = D.5036;
        not_prev_allocated.163 = wavefunctioncache.data == 0B;
        if (__builtin_expect ((integer(kind=8)) (overflow.162 != 0), 0, 41))
          {
            _gfortran_runtime_error (&"Integer overflow when calculating the amount of memory to allocate"[1]{lb: 1 sz: 1});
          }
        else
          {
            if (__builtin_expect ((integer(kind=8)) (wavefunctioncache.data != 0B), 0, 43))
              {
                _gfortran_runtime_error_at (&"At line 247 of file /home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1}, &"Attempting to allocate already allocated variable \'%s\'"[1]{lb: 1 sz: 1}, &"wavefunctioncache"[1]{lb: 1 sz: 1});
              }
            else
              {
                wavefunctioncache.data = (void * restrict) __builtin_malloc (MAX_EXPR <size.161, 1>);
                if (__builtin_expect ((integer(kind=8)) (wavefunctioncache.data == 0B), 0, 42))
                  {
                    _gfortran_os_error_at (&"In file \'/home/merlin/tmpfs/dftbuild/app/waveplot/molorb2.f90\', around line 254"[1]{lb: 1 sz: 1}, &"Error allocating %lu bytes"[1]{lb: 1 sz: 1}, size.161);
                  }
              }
          }
        wavefunctioncache.dim[0].lbound = (integer(kind=8)) -npointshalved[0];
        wavefunctioncache.dim[0].ubound = D.5007;
        wavefunctioncache.dim[0].stride = 1;
        wavefunctioncache.dim[1].lbound = 0;
        wavefunctioncache.dim[1].ubound = D.5011;
        wavefunctioncache.dim[1].stride = D.5010;
        wavefunctioncache.dim[2].lbound = (integer(kind=8)) -npointshalved[1];
        wavefunctioncache.dim[2].ubound = D.5015;
        wavefunctioncache.dim[2].stride = D.5014;
        wavefunctioncache.dim[3].lbound = 0;
        wavefunctioncache.dim[3].ubound = D.5019;
        wavefunctioncache.dim[3].stride = D.5018;
        wavefunctioncache.dim[4].lbound = (integer(kind=8)) -npointshalved[2];
        wavefunctioncache.dim[4].ubound = D.5023;
        wavefunctioncache.dim[4].stride = D.5022;
        wavefunctioncache.dim[5].lbound = 0;
        wavefunctioncache.dim[5].ubound = D.5027;
        wavefunctioncache.dim[5].stride = D.5026;
        wavefunctioncache.dim[6].lbound = 1;
        wavefunctioncache.dim[6].ubound = D.5031;
        wavefunctioncache.dim[6].stride = D.5030;
        wavefunctioncache.offset = D.5037;
        wavefunctioncache.span = 8;
        {
          real(kind=8)[0:] * restrict D.5042;
          integer(kind=8) D.5043;
          integer(kind=8) D.5044;
          integer(kind=8) D.5045;
          integer(kind=8) D.5046;
          integer(kind=8) D.5047;
          integer(kind=8) D.5048;
          integer(kind=8) D.5049;
          integer(kind=8) D.5050;
          integer(kind=8) D.5051;
          integer(kind=8) D.5052;
          integer(kind=8) D.5053;
          integer(kind=8) D.5054;
          integer(kind=8) D.5055;
          integer(kind=8) D.5056;
          integer(kind=8) D.5057;

          D.5042 = (real(kind=8)[0:] * restrict) wavefunctioncache.data;
          D.5043 = wavefunctioncache.offset;
          D.5044 = wavefunctioncache.dim[0].lbound;
          D.5045 = wavefunctioncache.dim[0].ubound;
          D.5046 = wavefunctioncache.dim[1].lbound;
          D.5047 = wavefunctioncache.dim[1].ubound;
          D.5048 = wavefunctioncache.dim[2].lbound;
          D.5049 = wavefunctioncache.dim[2].ubound;
          D.5050 = wavefunctioncache.dim[3].lbound;
          D.5051 = wavefunctioncache.dim[3].ubound;
          D.5052 = wavefunctioncache.dim[4].lbound;
          D.5053 = wavefunctioncache.dim[4].ubound;
          D.5054 = wavefunctioncache.dim[5].lbound;
          D.5055 = wavefunctioncache.dim[5].ubound;
          D.5056 = wavefunctioncache.dim[6].lbound;
          D.5057 = wavefunctioncache.dim[6].ubound;
          {
            integer(kind=8) S.164;

            S.164 = D.5056;
            while (1)
              {
                if (S.164 > D.5057) goto L.55;
                {
                  integer(kind=8) S.165;
                  integer(kind=8) D.5060;

                  D.5060 = wavefunctioncache.dim[6].stride * S.164 + D.5043;
                  S.165 = D.5054;
                  while (1)
                    {
                      if (S.165 > D.5055) goto L.54;
                      {
                        integer(kind=8) S.166;
                        integer(kind=8) D.5062;

                        D.5062 = wavefunctioncache.dim[5].stride * S.165 + D.5060;
                        S.166 = D.5052;
                        while (1)
                          {
                            if (S.166 > D.5053) goto L.53;
                            {
                              integer(kind=8) S.167;
                              integer(kind=8) D.5064;

                              D.5064 = wavefunctioncache.dim[4].stride * S.166 + D.5062;
                              S.167 = D.5050;
                              while (1)
                                {
                                  if (S.167 > D.5051) goto L.52;
                                  {
                                    integer(kind=8) S.168;
                                    integer(kind=8) D.5066;

                                    D.5066 = wavefunctioncache.dim[3].stride * S.167 + D.5064;
                                    S.168 = D.5048;
                                    while (1)
                                      {
                                        if (S.168 > D.5049) goto L.51;
                                        {
                                          integer(kind=8) S.169;
                                          integer(kind=8) D.5068;

                                          D.5068 = wavefunctioncache.dim[2].stride * S.168 + D.5066;
                                          S.169 = D.5046;
                                          while (1)
                                            {
                                              if (S.169 > D.5047) goto L.50;
                                              {
                                                integer(kind=8) S.170;
                                                integer(kind=8) D.5070;

                                                D.5070 = wavefunctioncache.dim[1].stride * S.169 + D.5068;
                                                S.170 = D.5044;
                                                while (1)
                                                  {
                                                    if (S.170 > D.5045) goto L.49;
                                                    (*D.5042)[S.170 + D.5070] = 0.0;
                                                    S.170 = S.170 + 1;
                                                  }
                                                L.49:;
                                              }
                                              S.169 = S.169 + 1;
                                            }
                                          L.50:;
                                        }
                                        S.168 = S.168 + 1;
                                      }
                                    L.51:;
                                  }
                                  S.167 = S.167 + 1;
                                }
                              L.52:;
                            }
                            S.166 = S.166 + 1;
                          }
                        L.53:;
                      }
                      S.165 = S.165 + 1;
                    }
                  L.54:;
                }
                S.164 = S.164 + 1;
              }
            L.55:;
          }
        }
        {
          struct __st_parameter_dt dt_parm.171;

          dt_parm.171.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.171.common.line = 256;
          dt_parm.171.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
          dt_parm.171.format_len = 11;
          dt_parm.171.common.flags = 4096;
          dt_parm.171.common.unit = 6;
          _gfortran_st_write (&dt_parm.171);
          _gfortran_transfer_character_write (&dt_parm.171, &" ->"[1]{lb: 1 sz: 1}, 3);
          {
            integer(kind=8) size.172;
            integer(kind=8) extent.173;
            signed char idx.174;
            integer(kind=4) D.5084;

            size.172 = 1;
            idx.174 = 0;
            goto L.57;
            L.56:;
            extent.173 = (wavefunctioncache.dim[idx.174].ubound - wavefunctioncache.dim[idx.174].lbound) + 1;
            if (extent.173 < 0)
              {
                extent.173 = 0;
              }
            size.172 = size.172 * extent.173;
            idx.174 = idx.174 + 1;
            L.57:;
            if (idx.174 <= 6) goto L.56;
            D.5084 = (integer(kind=4)) size.172;
            _gfortran_transfer_integer_write (&dt_parm.171, &D.5084, 4);
          }
          _gfortran_transfer_character_write (&dt_parm.171, &"elements,"[1]{lb: 1 sz: 1}, 9);
          {
            integer(kind=8) bytes.175;
            real(kind=4) D.5086;

            bytes.175 = 8;
            bytes.175 = (MAX_EXPR <wavefunctioncache.dim[0].ubound - wavefunctioncache.dim[0].lbound, -1> + 1) * bytes.175;
            bytes.175 = (MAX_EXPR <wavefunctioncache.dim[1].ubound - wavefunctioncache.dim[1].lbound, -1> + 1) * bytes.175;
            bytes.175 = (MAX_EXPR <wavefunctioncache.dim[2].ubound - wavefunctioncache.dim[2].lbound, -1> + 1) * bytes.175;
            bytes.175 = (MAX_EXPR <wavefunctioncache.dim[3].ubound - wavefunctioncache.dim[3].lbound, -1> + 1) * bytes.175;
            bytes.175 = (MAX_EXPR <wavefunctioncache.dim[4].ubound - wavefunctioncache.dim[4].lbound, -1> + 1) * bytes.175;
            bytes.175 = (MAX_EXPR <wavefunctioncache.dim[5].ubound - wavefunctioncache.dim[5].lbound, -1> + 1) * bytes.175;
            bytes.175 = (MAX_EXPR <wavefunctioncache.dim[6].ubound - wavefunctioncache.dim[6].lbound, -1> + 1) * bytes.175;
            D.5086 = ((real(kind=4)) bytes.175 / 1.0e+3) / 1.0e+3;
            _gfortran_transfer_real_write (&dt_parm.171, &D.5086, 4);
          }
          _gfortran_transfer_character_write (&dt_parm.171, &"MB"[1]{lb: 1 sz: 1}, 2);
          _gfortran_st_write_done (&dt_parm.171);
        }
        chunkedindices.dtype = {.elem_len=4, .rank=3, .type=1};
        D.5087 = (integer(kind=8)) MAX_EXPR <*natom, 0>;
        D.5088 = NON_LVALUE_EXPR <__builtin_expect ((integer(kind=8)) (D.5087 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5087 <= 2), 0, 41) ? 1 : 0>;
        D.5089 = D.5087 * 3;
        D.5090 = (integer(kind=8)) MAX_EXPR <*ncell, 0>;
        D.5091 = (__builtin_expect ((integer(kind=8)) (D.5090 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5090 < D.5089), 0, 41) ? 1 : 0) + D.5088;
        D.5092 = D.5089 * D.5090;
        D.5093 = D.5092;
        D.5094 = (__builtin_expect ((integer(kind=8)) ((unsigned long) D.5092 > 4611686018427387903), 0, 41) ? 1 : 0) + D.5091;
        D.5095 = -4 - NON_LVALUE_EXPR <D.5089>;
        D.5097 = *natom <= 0 || *ncell <= 0;
        if (D.5097)
          {
            size.176 = 0;
          }
        else
          {
            size.176 = (unsigned long) D.5092 * 4;
          }
        overflow.177 = D.5094;
        not_prev_allocated.178 = chunkedindices.data == 0B;
        if (__builtin_expect ((integer(kind=8)) (overflow.177 != 0), 0, 41))
          {
            _gfortran_runtime_error (&"Integer overflow when calculating the amount of memory to allocate"[1]{lb: 1 sz: 1});
          }
        else
          {
            if (__builtin_expect ((integer(kind=8)) (chunkedindices.data != 0B), 0, 43))
              {
                _gfortran_runtime_error_at (&"At line 260 of file /home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1}, &"Attempting to allocate already allocated variable \'%s\'"[1]{lb: 1 sz: 1}, &"chunkedindices"[1]{lb: 1 sz: 1});
              }
            else
              {
                chunkedindices.data = __builtin_malloc (MAX_EXPR <size.176, 1>);
                if (__builtin_expect ((integer(kind=8)) (chunkedindices.data == 0B), 0, 42))
                  {
                    _gfortran_os_error_at (&"In file \'/home/merlin/tmpfs/dftbuild/app/waveplot/molorb2.f90\', around line 261"[1]{lb: 1 sz: 1}, &"Error allocating %lu bytes"[1]{lb: 1 sz: 1}, size.176);
                  }
              }
          }
        chunkedindices.dim[0].lbound = 1;
        chunkedindices.dim[0].ubound = 3;
        chunkedindices.dim[0].stride = 1;
        chunkedindices.dim[1].lbound = 1;
        chunkedindices.dim[1].ubound = (integer(kind=8)) *natom;
        chunkedindices.dim[1].stride = 3;
        chunkedindices.dim[2].lbound = 1;
        chunkedindices.dim[2].ubound = (integer(kind=8)) *ncell;
        chunkedindices.dim[2].stride = D.5089;
        chunkedindices.offset = D.5095;
        chunkedindices.span = 4;
        sliceindicesmain.dtype = {.elem_len=4, .rank=4, .type=1};
        D.5100 = (integer(kind=8)) MAX_EXPR <*natom, 0>;
        D.5101 = NON_LVALUE_EXPR <__builtin_expect ((integer(kind=8)) (D.5100 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5100 <= 5), 0, 41) ? 1 : 0>;
        D.5102 = D.5100 * 6;
        D.5103 = (integer(kind=8)) MAX_EXPR <*ncell, 0>;
        D.5104 = (__builtin_expect ((integer(kind=8)) (D.5103 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5103 < D.5102), 0, 41) ? 1 : 0) + D.5101;
        D.5105 = D.5102 * D.5103;
        D.5106 = D.5105;
        D.5107 = (__builtin_expect ((integer(kind=8)) ((unsigned long) D.5105 > 4611686018427387903), 0, 41) ? 1 : 0) + D.5104;
        D.5108 = -10 - NON_LVALUE_EXPR <D.5102>;
        D.5110 = *natom <= 0 || *ncell <= 0;
        if (D.5110)
          {
            size.179 = 0;
          }
        else
          {
            size.179 = (unsigned long) D.5105 * 4;
          }
        overflow.180 = D.5107;
        not_prev_allocated.181 = sliceindicesmain.data == 0B;
        if (__builtin_expect ((integer(kind=8)) (overflow.180 != 0), 0, 41))
          {
            _gfortran_runtime_error (&"Integer overflow when calculating the amount of memory to allocate"[1]{lb: 1 sz: 1});
          }
        else
          {
            if (__builtin_expect ((integer(kind=8)) (sliceindicesmain.data != 0B), 0, 43))
              {
                _gfortran_runtime_error_at (&"At line 261 of file /home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1}, &"Attempting to allocate already allocated variable \'%s\'"[1]{lb: 1 sz: 1}, &"sliceindicesmain"[1]{lb: 1 sz: 1});
              }
            else
              {
                sliceindicesmain.data = __builtin_malloc (MAX_EXPR <size.179, 1>);
                if (__builtin_expect ((integer(kind=8)) (sliceindicesmain.data == 0B), 0, 42))
                  {
                    _gfortran_os_error_at (&"In file \'/home/merlin/tmpfs/dftbuild/app/waveplot/molorb2.f90\', around line 262"[1]{lb: 1 sz: 1}, &"Error allocating %lu bytes"[1]{lb: 1 sz: 1}, size.179);
                  }
              }
          }
        sliceindicesmain.dim[0].lbound = 1;
        sliceindicesmain.dim[0].ubound = 3;
        sliceindicesmain.dim[0].stride = 1;
        sliceindicesmain.dim[1].lbound = 1;
        sliceindicesmain.dim[1].ubound = 2;
        sliceindicesmain.dim[1].stride = 3;
        sliceindicesmain.dim[2].lbound = 1;
        sliceindicesmain.dim[2].ubound = (integer(kind=8)) *natom;
        sliceindicesmain.dim[2].stride = 6;
        sliceindicesmain.dim[3].lbound = 1;
        sliceindicesmain.dim[3].ubound = (integer(kind=8)) *ncell;
        sliceindicesmain.dim[3].stride = D.5102;
        sliceindicesmain.offset = D.5108;
        sliceindicesmain.span = 4;
        sliceindicescache.dtype = {.elem_len=4, .rank=4, .type=1};
        D.5113 = (integer(kind=8)) MAX_EXPR <*natom, 0>;
        D.5114 = NON_LVALUE_EXPR <__builtin_expect ((integer(kind=8)) (D.5113 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5113 <= 5), 0, 41) ? 1 : 0>;
        D.5115 = D.5113 * 6;
        D.5116 = (integer(kind=8)) MAX_EXPR <*ncell, 0>;
        D.5117 = (__builtin_expect ((integer(kind=8)) (D.5116 == 0), 0, 46) ? 0 : __builtin_expect ((integer(kind=8)) (9223372036854775807 / D.5116 < D.5115), 0, 41) ? 1 : 0) + D.5114;
        D.5118 = D.5115 * D.5116;
        D.5119 = D.5118;
        D.5120 = (__builtin_expect ((integer(kind=8)) ((unsigned long) D.5118 > 4611686018427387903), 0, 41) ? 1 : 0) + D.5117;
        D.5121 = -10 - NON_LVALUE_EXPR <D.5115>;
        D.5123 = *natom <= 0 || *ncell <= 0;
        if (D.5123)
          {
            size.182 = 0;
          }
        else
          {
            size.182 = (unsigned long) D.5118 * 4;
          }
        overflow.183 = D.5120;
        not_prev_allocated.184 = sliceindicescache.data == 0B;
        if (__builtin_expect ((integer(kind=8)) (overflow.183 != 0), 0, 41))
          {
            _gfortran_runtime_error (&"Integer overflow when calculating the amount of memory to allocate"[1]{lb: 1 sz: 1});
          }
        else
          {
            if (__builtin_expect ((integer(kind=8)) (sliceindicescache.data != 0B), 0, 43))
              {
                _gfortran_runtime_error_at (&"At line 262 of file /home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1}, &"Attempting to allocate already allocated variable \'%s\'"[1]{lb: 1 sz: 1}, &"sliceindicescache"[1]{lb: 1 sz: 1});
              }
            else
              {
                sliceindicescache.data = __builtin_malloc (MAX_EXPR <size.182, 1>);
                if (__builtin_expect ((integer(kind=8)) (sliceindicescache.data == 0B), 0, 42))
                  {
                    _gfortran_os_error_at (&"In file \'/home/merlin/tmpfs/dftbuild/app/waveplot/molorb2.f90\', around line 263"[1]{lb: 1 sz: 1}, &"Error allocating %lu bytes"[1]{lb: 1 sz: 1}, size.182);
                  }
              }
          }
        sliceindicescache.dim[0].lbound = 1;
        sliceindicescache.dim[0].ubound = 3;
        sliceindicescache.dim[0].stride = 1;
        sliceindicescache.dim[1].lbound = 1;
        sliceindicescache.dim[1].ubound = 2;
        sliceindicescache.dim[1].stride = 3;
        sliceindicescache.dim[2].lbound = 1;
        sliceindicescache.dim[2].ubound = (integer(kind=8)) *natom;
        sliceindicescache.dim[2].stride = 6;
        sliceindicescache.dim[3].lbound = 1;
        sliceindicescache.dim[3].ubound = (integer(kind=8)) *ncell;
        sliceindicescache.dim[3].stride = D.5115;
        sliceindicescache.offset = D.5121;
        sliceindicescache.span = 4;
        {
          struct __st_parameter_dt dt_parm.185;

          dt_parm.185.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.185.common.line = 264;
          dt_parm.185.common.flags = 128;
          dt_parm.185.common.unit = 6;
          _gfortran_st_write (&dt_parm.185);
          _gfortran_transfer_character_write (&dt_parm.185, &"Aligning Arrays..."[1]{lb: 1 sz: 1}, 18);
          _gfortran_st_write_done (&dt_parm.185);
        }
        {
          integer(kind=4) D.5127;

          D.5127 = *ncell;
          icell = 1;
          while (1)
            {
              {
                logical(kind=4) D.5130;

                D.5130 = icell > D.5127;
                if (D.5130) goto L.59;
                coeffind = 1;
                {
                  integer(kind=4) D.5131;

                  D.5131 = *natom;
                  iatom = 1;
                  while (1)
                    {
                      {
                        logical(kind=4) D.5134;

                        D.5134 = iatom > D.5131;
                        if (D.5134) goto L.61;
                        ispecies = *((integer(kind=4) *) species.0 + (sizetype) (((integer(kind=8)) iatom * stride.55 + offset.56) * 4));
                        {
                          integer(kind=8) D.5135;
                          integer(kind=8) D.5136;
                          integer(kind=8) D.5137;
                          integer(kind=8) D.5138;
                          integer(kind=8) D.5139;
                          integer(kind=8) D.5140;

                          D.5135 = offset.10;
                          D.5136 = ubound.4;
                          D.5137 = offset.46;
                          D.5138 = ubound.44;
                          D.5139 = (integer(kind=8)) iatom;
                          D.5140 = (integer(kind=8)) icell;
                          {
                            integer(kind=8) S.186;
                            integer(kind=8) D.5142;
                            integer(kind=8) D.5143;
                            integer(kind=8) D.5144;
                            integer(kind=8) D.5145;

                            D.5142 = stride.5;
                            D.5143 = D.5139 * stride.7 + D.5135;
                            D.5144 = D.5140 * stride.9 + D.5143;
                            D.5145 = stride.45;
                            S.186 = 1;
                            while (1)
                              {
                                if (S.186 > 3) goto L.62;
                                pos[S.186 + -1] = *((real(kind=8) *) coords.0 + (sizetype) ((S.186 * D.5142 + D.5144) * 8)) + *((real(kind=8) *) origin.0 + (sizetype) ((S.186 * D.5145 + D.5137) * 8));
                                S.186 = S.186 + 1;
                              }
                            L.62:;
                          }
                        }
                        (void) __builtin_memcpy ((void *) &cachebasis, (void *) &cachegridvecs, 72);
                        {
                          struct array02_real(kind=8) parm.187;
                          struct array02_real(kind=8) parm.188;

                          parm.187.span = 8;
                          parm.187.dtype = {.elem_len=8, .rank=2, .type=3};
                          parm.187.dim[0].lbound = 1;
                          parm.187.dim[0].ubound = 3;
                          parm.187.dim[0].stride = 1;
                          parm.187.dim[1].lbound = 1;
                          parm.187.dim[1].ubound = 3;
                          parm.187.dim[1].stride = 3;
                          parm.187.data = (void *) &cachebasis[0];
                          parm.187.offset = -4;
                          parm.188.span = 8;
                          parm.188.dtype = {.elem_len=8, .rank=2, .type=3};
                          parm.188.dim[0].lbound = 1;
                          parm.188.dim[0].ubound = 3;
                          parm.188.dim[0].stride = 1;
                          parm.188.dim[1].lbound = 1;
                          parm.188.dim[1].ubound = 1;
                          parm.188.dim[1].stride = 3;
                          parm.188.data = (void *) &pos[0];
                          parm.188.offset = -4;
                          gesv_dble (&parm.187, &parm.188, 0B, 0B, 0B);
                        }
                        {
                          integer(kind=4)[0:] * D.5170;
                          integer(kind=8) D.5171;
                          integer(kind=8) D.5172;
                          integer(kind=8) D.5173;
                          integer(kind=8) D.5174;
                          integer(kind=8) D.5175;
                          integer(kind=8) D.5176;

                          D.5170 = (integer(kind=4)[0:] *) chunkedindices.data;
                          D.5171 = chunkedindices.offset;
                          D.5172 = chunkedindices.dim[0].lbound;
                          D.5173 = chunkedindices.dim[0].ubound;
                          D.5174 = (integer(kind=8)) iatom;
                          D.5175 = (integer(kind=8)) icell;
                          D.5176 = D.5172 + -1;
                          {
                            integer(kind=8) S.189;
                            integer(kind=8) D.5178;
                            integer(kind=8) D.5179;

                            D.5178 = chunkedindices.dim[1].stride * D.5174 + D.5171;
                            D.5179 = chunkedindices.dim[2].stride * D.5175 + D.5178;
                            S.189 = 1;
                            while (1)
                              {
                                if (S.189 > 3) goto L.63;
                                (*D.5170)[(S.189 + D.5176) + D.5179] = ABS_EXPR <(integer(kind=4)) (__builtin_fmod (pos[S.189 + -1], 1.0e+0) * (real(kind=8)) resolutionfactor[S.189 + -1])>;
                                S.189 = S.189 + 1;
                              }
                            L.63:;
                          }
                        }
                        {
                          integer(kind=4)[0:] * D.5181;
                          integer(kind=8) D.5182;
                          integer(kind=8) D.5183;
                          integer(kind=8) D.5184;
                          integer(kind=8) D.5185;
                          integer(kind=8) D.5186;
                          integer(kind=8) D.5187;

                          D.5181 = (integer(kind=4)[0:] *) sliceindicesmain.data;
                          D.5182 = sliceindicesmain.offset;
                          D.5183 = sliceindicesmain.dim[0].lbound;
                          D.5184 = sliceindicesmain.dim[0].ubound;
                          D.5185 = (integer(kind=8)) iatom;
                          D.5186 = (integer(kind=8)) icell;
                          D.5187 = D.5183 + -1;
                          {
                            integer(kind=8) S.190;
                            integer(kind=8) D.5189;
                            integer(kind=8) D.5190;
                            integer(kind=8) D.5191;

                            D.5189 = NON_LVALUE_EXPR <sliceindicesmain.dim[1].stride> + D.5182;
                            D.5190 = sliceindicesmain.dim[2].stride * D.5185 + D.5189;
                            D.5191 = sliceindicesmain.dim[3].stride * D.5186 + D.5190;
                            S.190 = 1;
                            while (1)
                              {
                                if (S.190 > 3) goto L.64;
                                {
                                  integer(kind=4) M.191;
                                  integer(kind=4) D.5193;

                                  M.191 = 1;
                                  D.5193 = (integer(kind=4)) pos[S.190 + -1] - npointshalved[S.190 + -1];
                                  M.191 = MAX_EXPR <D.5193, M.191>;
                                  (*D.5181)[(S.190 + D.5187) + D.5191] = M.191;
                                }
                                S.190 = S.190 + 1;
                              }
                            L.64:;
                          }
                        }
                        {
                          integer(kind=4)[0:] * D.5195;
                          integer(kind=8) D.5196;
                          integer(kind=8) D.5197;
                          integer(kind=8) D.5198;
                          integer(kind=8) D.5199;
                          integer(kind=8) D.5200;
                          integer(kind=8) D.5201;

                          D.5195 = (integer(kind=4)[0:] *) sliceindicesmain.data;
                          D.5196 = sliceindicesmain.offset;
                          D.5197 = sliceindicesmain.dim[0].lbound;
                          D.5198 = sliceindicesmain.dim[0].ubound;
                          D.5199 = (integer(kind=8)) iatom;
                          D.5200 = (integer(kind=8)) icell;
                          D.5201 = D.5197 + -1;
                          {
                            integer(kind=8) S.192;
                            integer(kind=8) D.5203;
                            integer(kind=8) D.5204;
                            integer(kind=8) D.5205;

                            D.5203 = sliceindicesmain.dim[1].stride * 2 + D.5196;
                            D.5204 = sliceindicesmain.dim[2].stride * D.5199 + D.5203;
                            D.5205 = sliceindicesmain.dim[3].stride * D.5200 + D.5204;
                            S.192 = 1;
                            while (1)
                              {
                                if (S.192 > 3) goto L.65;
                                {
                                  integer(kind=4) D.5206;
                                  integer(kind=4) M.193;
                                  integer(kind=4) D.5208;

                                  D.5206 = npoints[S.192 + -1];
                                  M.193 = D.5206;
                                  D.5208 = (integer(kind=4)) pos[S.192 + -1] + npointshalved[S.192 + -1];
                                  M.193 = MIN_EXPR <D.5208, M.193>;
                                  (*D.5195)[(S.192 + D.5201) + D.5205] = M.193;
                                }
                                S.192 = S.192 + 1;
                              }
                            L.65:;
                          }
                        }
                        {
                          integer(kind=4)[0:] * D.5210;
                          integer(kind=8) D.5211;
                          integer(kind=8) D.5212;
                          integer(kind=8) D.5213;
                          integer(kind=4)[0:] * D.5214;
                          integer(kind=8) D.5215;
                          integer(kind=8) D.5216;
                          integer(kind=8) D.5217;
                          integer(kind=8) D.5218;
                          integer(kind=8) D.5219;
                          integer(kind=8) D.5220;
                          integer(kind=8) D.5221;
                          integer(kind=8) D.5222;
                          integer(kind=8) D.5223;

                          D.5210 = (integer(kind=4)[0:] *) sliceindicesmain.data;
                          D.5211 = sliceindicesmain.offset;
                          D.5212 = sliceindicesmain.dim[0].lbound;
                          D.5213 = sliceindicesmain.dim[0].ubound;
                          D.5214 = (integer(kind=4)[0:] *) sliceindicescache.data;
                          D.5215 = sliceindicescache.offset;
                          D.5216 = sliceindicescache.dim[0].lbound;
                          D.5217 = sliceindicescache.dim[0].ubound;
                          D.5218 = (integer(kind=8)) iatom;
                          D.5219 = (integer(kind=8)) icell;
                          D.5220 = (integer(kind=8)) iatom;
                          D.5221 = (integer(kind=8)) icell;
                          D.5222 = D.5212 + -1;
                          D.5223 = D.5216 + -1;
                          {
                            integer(kind=8) S.194;
                            integer(kind=8) D.5225;
                            integer(kind=8) D.5226;
                            integer(kind=8) D.5227;
                            integer(kind=8) D.5228;
                            integer(kind=8) D.5229;
                            integer(kind=8) D.5230;

                            D.5225 = NON_LVALUE_EXPR <sliceindicesmain.dim[1].stride> + D.5211;
                            D.5226 = sliceindicesmain.dim[2].stride * D.5218 + D.5225;
                            D.5227 = sliceindicesmain.dim[3].stride * D.5219 + D.5226;
                            D.5228 = NON_LVALUE_EXPR <sliceindicescache.dim[1].stride> + D.5215;
                            D.5229 = sliceindicescache.dim[2].stride * D.5220 + D.5228;
                            D.5230 = sliceindicescache.dim[3].stride * D.5221 + D.5229;
                            S.194 = 1;
                            while (1)
                              {
                                if (S.194 > 3) goto L.66;
                                (*D.5214)[(S.194 + D.5223) + D.5230] = (*D.5210)[(S.194 + D.5222) + D.5227] - (integer(kind=4)) pos[S.194 + -1];
                                S.194 = S.194 + 1;
                              }
                            L.66:;
                          }
                        }
                        {
                          integer(kind=4)[0:] * D.5232;
                          integer(kind=8) D.5233;
                          integer(kind=8) D.5234;
                          integer(kind=8) D.5235;
                          integer(kind=4)[0:] * D.5236;
                          integer(kind=8) D.5237;
                          integer(kind=8) D.5238;
                          integer(kind=8) D.5239;
                          integer(kind=8) D.5240;
                          integer(kind=8) D.5241;
                          integer(kind=8) D.5242;
                          integer(kind=8) D.5243;
                          integer(kind=8) D.5244;
                          integer(kind=8) D.5245;

                          D.5232 = (integer(kind=4)[0:] *) sliceindicesmain.data;
                          D.5233 = sliceindicesmain.offset;
                          D.5234 = sliceindicesmain.dim[0].lbound;
                          D.5235 = sliceindicesmain.dim[0].ubound;
                          D.5236 = (integer(kind=4)[0:] *) sliceindicescache.data;
                          D.5237 = sliceindicescache.offset;
                          D.5238 = sliceindicescache.dim[0].lbound;
                          D.5239 = sliceindicescache.dim[0].ubound;
                          D.5240 = (integer(kind=8)) iatom;
                          D.5241 = (integer(kind=8)) icell;
                          D.5242 = (integer(kind=8)) iatom;
                          D.5243 = (integer(kind=8)) icell;
                          D.5244 = D.5234 + -1;
                          D.5245 = D.5238 + -1;
                          {
                            integer(kind=8) S.195;
                            integer(kind=8) D.5247;
                            integer(kind=8) D.5248;
                            integer(kind=8) D.5249;
                            integer(kind=8) D.5250;
                            integer(kind=8) D.5251;
                            integer(kind=8) D.5252;

                            D.5247 = sliceindicesmain.dim[1].stride * 2 + D.5233;
                            D.5248 = sliceindicesmain.dim[2].stride * D.5240 + D.5247;
                            D.5249 = sliceindicesmain.dim[3].stride * D.5241 + D.5248;
                            D.5250 = sliceindicescache.dim[1].stride * 2 + D.5237;
                            D.5251 = sliceindicescache.dim[2].stride * D.5242 + D.5250;
                            D.5252 = sliceindicescache.dim[3].stride * D.5243 + D.5251;
                            S.195 = 1;
                            while (1)
                              {
                                if (S.195 > 3) goto L.67;
                                (*D.5236)[(S.195 + D.5245) + D.5252] = (*D.5232)[(S.195 + D.5244) + D.5249] - (integer(kind=4)) pos[S.195 + -1];
                                S.195 = S.195 + 1;
                              }
                            L.67:;
                          }
                        }
                        L.60:;
                        iatom = iatom + 1;
                      }
                    }
                  L.61:;
                }
                L.58:;
                icell = icell + 1;
              }
            }
          L.59:;
        }
        {
          struct __st_parameter_dt dt_parm.196;

          dt_parm.196.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.196.common.line = 292;
          dt_parm.196.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
          dt_parm.196.format_len = 11;
          dt_parm.196.common.flags = 4096;
          dt_parm.196.common.unit = 6;
          _gfortran_st_write (&dt_parm.196);
          _gfortran_transfer_character_write (&dt_parm.196, &"Caching"[1]{lb: 1 sz: 1}, 7);
          _gfortran_transfer_integer_write (&dt_parm.196, &nuniqueorb, 4);
          _gfortran_transfer_character_write (&dt_parm.196, &"wavefunctions:"[1]{lb: 1 sz: 1}, 14);
          _gfortran_st_write_done (&dt_parm.196);
        }
        {
          integer(kind=4) D.5255;

          D.5255 = nuniqueorb;
          iorb = 1;
          while (1)
            {
              {
                logical(kind=4) D.5258;

                D.5258 = iorb > D.5255;
                if (D.5258) goto L.69;
                {
                  struct __st_parameter_dt dt_parm.197;

                  dt_parm.197.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
                  dt_parm.197.common.line = 295;
                  dt_parm.197.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
                  dt_parm.197.format_len = 11;
                  dt_parm.197.common.flags = 4096;
                  dt_parm.197.common.unit = 6;
                  _gfortran_st_write (&dt_parm.197);
                  _gfortran_transfer_character_write (&dt_parm.197, &" -> Caching orbital "[1]{lb: 1 sz: 1}, 20);
                  _gfortran_transfer_integer_write (&dt_parm.197, &iorb, 4);
                  _gfortran_st_write_done (&dt_parm.197);
                }
                il = *((integer(kind=4) *) angmoms.0 + (sizetype) (((integer(kind=8)) iorb * stride.1 + offset.2) * 4));
                {
                  integer(kind=4) D.5260;

                  D.5260 = resolutionfactor[2] + -2;
                  i3chunked = 0;
                  while (1)
                    {
                      {
                        logical(kind=4) D.5263;

                        D.5263 = i3chunked > D.5260;
                        if (D.5263) goto L.71;
                        {
                          integer(kind=4) D.5264;
                          integer(kind=4) D.5265;

                          D.5264 = -npointshalved[2];
                          D.5265 = npointshalved[2];
                          i3 = D.5264;
                          while (1)
                            {
                              {
                                logical(kind=4) D.5268;

                                D.5268 = i3 > D.5265;
                                if (D.5268) goto L.73;
                                {
                                  real(kind=8) D.5269;

                                  D.5269 = (real(kind=8)) (resolutionfactor[2] * i3 + i3chunked);
                                  {
                                    integer(kind=8) S.198;

                                    S.198 = 1;
                                    while (1)
                                      {
                                        if (S.198 > 3) goto L.74;
                                        curcoords[S.198 + 5] = cachegridvecs[S.198 + 5] * D.5269;
                                        S.198 = S.198 + 1;
                                      }
                                    L.74:;
                                  }
                                }
                                {
                                  integer(kind=4) D.5272;

                                  D.5272 = resolutionfactor[1] + -2;
                                  i2chunked = 0;
                                  while (1)
                                    {
                                      {
                                        logical(kind=4) D.5275;

                                        D.5275 = i2chunked > D.5272;
                                        if (D.5275) goto L.76;
                                        {
                                          integer(kind=4) D.5276;
                                          integer(kind=4) D.5277;

                                          D.5276 = -npointshalved[1];
                                          D.5277 = npointshalved[1];
                                          i2 = D.5276;
                                          while (1)
                                            {
                                              {
                                                logical(kind=4) D.5280;

                                                D.5280 = i2 > D.5277;
                                                if (D.5280) goto L.78;
                                                {
                                                  real(kind=8) D.5281;

                                                  D.5281 = (real(kind=8)) (resolutionfactor[1] * i2 + i2chunked);
                                                  {
                                                    integer(kind=8) S.199;

                                                    S.199 = 1;
                                                    while (1)
                                                      {
                                                        if (S.199 > 3) goto L.79;
                                                        curcoords[S.199 + 2] = cachegridvecs[S.199 + 2] * D.5281;
                                                        S.199 = S.199 + 1;
                                                      }
                                                    L.79:;
                                                  }
                                                }
                                                {
                                                  integer(kind=4) D.5284;

                                                  D.5284 = resolutionfactor[0] + -2;
                                                  i1chunked = 0;
                                                  while (1)
                                                    {
                                                      {
                                                        logical(kind=4) D.5287;

                                                        D.5287 = i1chunked > D.5284;
                                                        if (D.5287) goto L.81;
                                                        {
                                                          integer(kind=4) D.5288;
                                                          integer(kind=4) D.5289;

                                                          D.5288 = -npointshalved[0];
                                                          D.5289 = npointshalved[0];
                                                          i1 = D.5288;
                                                          while (1)
                                                            {
                                                              {
                                                                logical(kind=4) D.5292;

                                                                D.5292 = i1 > D.5289;
                                                                if (D.5292) goto L.83;
                                                                {
                                                                  real(kind=8) D.5293;

                                                                  D.5293 = (real(kind=8)) (resolutionfactor[0] * i1 + i1chunked);
                                                                  {
                                                                    integer(kind=8) S.200;

                                                                    S.200 = 1;
                                                                    while (1)
                                                                      {
                                                                        if (S.200 > 3) goto L.84;
                                                                        curcoords[S.200 + -1] = cachegridvecs[S.200 + -1] * D.5293;
                                                                        S.200 = S.200 + 1;
                                                                      }
                                                                    L.84:;
                                                                  }
                                                                }
                                                                {
                                                                  integer(kind=8) S.201;

                                                                  S.201 = 1;
                                                                  while (1)
                                                                    {
                                                                      if (S.201 > 3) goto L.86;
                                                                      {
                                                                        real(kind=8) val.202;

                                                                        val.202 = 0.0;
                                                                        {
                                                                          integer(kind=8) S.203;
                                                                          integer(kind=8) D.5299;

                                                                          D.5299 = S.201 + -4;
                                                                          S.203 = 1;
                                                                          while (1)
                                                                            {
                                                                              if (S.203 > 3) goto L.85;
                                                                              val.202 = curcoords[S.203 * 3 + D.5299] + val.202;
                                                                              S.203 = S.203 + 1;
                                                                            }
                                                                          L.85:;
                                                                        }
                                                                        xyz[S.201 + -1] = val.202;
                                                                      }
                                                                      S.201 = S.201 + 1;
                                                                    }
                                                                  L.86:;
                                                                }
                                                                if (*tperiodic)
                                                                  {
                                                                    {
                                                                      integer(kind=8) __var_3_do;
                                                                      integer(kind=8) __var_4_do;
                                                                      real(kind=8) __var_2_mmb[3];

                                                                      {
                                                                        integer(kind=8) D.5307;
                                                                        integer(kind=8) D.5308;
                                                                        struct array02_real(kind=8) parm.204;
                                                                        integer(kind=8) D.5315;
                                                                        integer(kind=8) D.5316;

                                                                        D.5307 = ubound.48;
                                                                        D.5308 = ubound.50;
                                                                        parm.204.span = 8;
                                                                        parm.204.dtype = {.elem_len=8, .rank=2, .type=3};
                                                                        D.5315 = stride.49;
                                                                        parm.204.dim[0].lbound = 1;
                                                                        parm.204.dim[0].ubound = D.5307;
                                                                        parm.204.dim[0].stride = NON_LVALUE_EXPR <D.5315>;
                                                                        D.5316 = stride.51;
                                                                        parm.204.dim[1].lbound = 1;
                                                                        parm.204.dim[1].ubound = D.5308;
                                                                        parm.204.dim[1].stride = NON_LVALUE_EXPR <D.5316>;
                                                                        parm.204.data = 0B;
                                                                        parm.204.offset = -NON_LVALUE_EXPR <D.5315> - NON_LVALUE_EXPR <D.5316>;
                                                                        if ((real(kind=4)) MAX_EXPR <(parm.204.dim[1].ubound - parm.204.dim[1].lbound) + 1, 0> * 3.0e+0 <= 9.0e+2)
                                                                          {
                                                                            frac = {};
                                                                            {
                                                                              integer(kind=8) D.5317;
                                                                              integer(kind=8) D.5318;
                                                                              struct array02_real(kind=8) parm.205;
                                                                              integer(kind=8) D.5325;
                                                                              integer(kind=8) D.5326;
                                                                              integer(kind=8) D.5327;

                                                                              D.5317 = ubound.48;
                                                                              D.5318 = ubound.50;
                                                                              parm.205.span = 8;
                                                                              parm.205.dtype = {.elem_len=8, .rank=2, .type=3};
                                                                              D.5325 = stride.49;
                                                                              parm.205.dim[0].lbound = 1;
                                                                              parm.205.dim[0].ubound = D.5317;
                                                                              parm.205.dim[0].stride = NON_LVALUE_EXPR <D.5325>;
                                                                              D.5326 = stride.51;
                                                                              parm.205.dim[1].lbound = 1;
                                                                              parm.205.dim[1].ubound = D.5318;
                                                                              parm.205.dim[1].stride = NON_LVALUE_EXPR <D.5326>;
                                                                              parm.205.data = 0B;
                                                                              parm.205.offset = -NON_LVALUE_EXPR <D.5325> - NON_LVALUE_EXPR <D.5326>;
                                                                              D.5327 = MAX_EXPR <(parm.205.dim[1].ubound - parm.205.dim[1].lbound) + 1, 0> + -1;
                                                                              __var_3_do = 0;
                                                                              while (1)
                                                                                {
                                                                                  {
                                                                                    logical(kind=4) D.5330;

                                                                                    D.5330 = __var_3_do > D.5327;
                                                                                    if (D.5330) goto L.91;
                                                                                    __var_4_do = 0;
                                                                                    while (1)
                                                                                      {
                                                                                        {
                                                                                          logical(kind=4) D.5333;

                                                                                          D.5333 = __var_4_do > 2;
                                                                                          if (D.5333) goto L.93;
                                                                                          frac[__var_3_do] = frac[__var_3_do] + xyz[__var_4_do] * *((real(kind=8) *) recvecs2p.0 + (sizetype) ((((__var_3_do + 1) * stride.51 + offset.52) + (__var_4_do + 1) * stride.49) * 8));
                                                                                          L.92:;
                                                                                          __var_4_do = __var_4_do + 1;
                                                                                        }
                                                                                      }
                                                                                    L.93:;
                                                                                    L.90:;
                                                                                    __var_3_do = __var_3_do + 1;
                                                                                  }
                                                                                }
                                                                              L.91:;
                                                                            }
                                                                          }
                                                                        else
                                                                          {
                                                                            {
                                                                              struct array01_real(kind=8) parm.206;
                                                                              struct array01_real(kind=8) parm.207;
                                                                              struct array01_real(kind=8) * D.5346;
                                                                              integer(kind=8) D.5347;
                                                                              integer(kind=8) D.5348;
                                                                              struct array02_real(kind=8) parm.208;
                                                                              integer(kind=8) D.5355;
                                                                              integer(kind=8) D.5356;
                                                                              struct array02_real(kind=8) * D.5357;

                                                                              parm.206.span = 8;
                                                                              parm.206.dtype = {.elem_len=8, .rank=1, .type=3};
                                                                              parm.206.dim[0].lbound = 1;
                                                                              parm.206.dim[0].ubound = 3;
                                                                              parm.206.dim[0].stride = 1;
                                                                              parm.206.data = (void *) &frac[0];
                                                                              parm.206.offset = -1;
                                                                              parm.207.span = 8;
                                                                              parm.207.dtype = {.elem_len=8, .rank=1, .type=3};
                                                                              parm.207.dim[0].lbound = 1;
                                                                              parm.207.dim[0].ubound = 3;
                                                                              parm.207.dim[0].stride = 1;
                                                                              parm.207.data = (void *) &xyz[0];
                                                                              parm.207.offset = -1;
                                                                              D.5346 = &parm.207;
                                                                              D.5347 = ubound.48;
                                                                              D.5348 = ubound.50;
                                                                              parm.208.span = 8;
                                                                              parm.208.dtype = {.elem_len=8, .rank=2, .type=3};
                                                                              D.5355 = stride.49;
                                                                              parm.208.dim[0].lbound = 1;
                                                                              parm.208.dim[0].ubound = D.5347;
                                                                              parm.208.dim[0].stride = NON_LVALUE_EXPR <D.5355>;
                                                                              D.5356 = stride.51;
                                                                              parm.208.dim[1].lbound = 1;
                                                                              parm.208.dim[1].ubound = D.5348;
                                                                              parm.208.dim[1].stride = NON_LVALUE_EXPR <D.5356>;
                                                                              parm.208.data = (void *) recvecs2p.0;
                                                                              parm.208.offset = -NON_LVALUE_EXPR <D.5355> - NON_LVALUE_EXPR <D.5356>;
                                                                              D.5357 = &parm.208;
                                                                              _gfortran_matmul_r8 (&parm.206, D.5346, D.5357, 0, 0, 0B);
                                                                            }
                                                                          }
                                                                      }
                                                                      L.89:;
                                                                      L.88:;
                                                                      {
                                                                        integer(kind=8) __var_5_do;
                                                                        integer(kind=8) __var_6_do;

                                                                        {
                                                                          integer(kind=8) S.209;

                                                                          S.209 = 1;
                                                                          while (1)
                                                                            {
                                                                              if (S.209 > 3) goto L.95;
                                                                              {
                                                                                real(kind=8) D.5368;
                                                                                integer(kind=4) D.5369;

                                                                                D.5368 = frac[S.209 + -1];
                                                                                D.5369 = (integer(kind=4)) D.5368;
                                                                                __var_2_mmb[S.209 + -1] = frac[S.209 + -1] - ((real(kind=8)) D.5369 <= D.5368 ? (real(kind=8)) D.5369 : (real(kind=8)) (D.5369 + -1));
                                                                              }
                                                                              S.209 = S.209 + 1;
                                                                            }
                                                                          L.95:;
                                                                        }
                                                                        xyz = {};
                                                                        __var_5_do = 0;
                                                                        while (1)
                                                                          {
                                                                            {
                                                                              logical(kind=4) D.5376;

                                                                              D.5376 = __var_5_do > 2;
                                                                              if (D.5376) goto L.98;
                                                                              {
                                                                                integer(kind=8) D.5377;
                                                                                integer(kind=8) D.5378;
                                                                                struct array02_real(kind=8) parm.210;
                                                                                integer(kind=8) D.5385;
                                                                                integer(kind=8) D.5386;
                                                                                integer(kind=8) D.5387;

                                                                                D.5377 = ubound.38;
                                                                                D.5378 = ubound.40;
                                                                                parm.210.span = 8;
                                                                                parm.210.dtype = {.elem_len=8, .rank=2, .type=3};
                                                                                D.5385 = stride.39;
                                                                                parm.210.dim[0].lbound = 1;
                                                                                parm.210.dim[0].ubound = D.5377;
                                                                                parm.210.dim[0].stride = NON_LVALUE_EXPR <D.5385>;
                                                                                D.5386 = stride.41;
                                                                                parm.210.dim[1].lbound = 1;
                                                                                parm.210.dim[1].ubound = D.5378;
                                                                                parm.210.dim[1].stride = NON_LVALUE_EXPR <D.5386>;
                                                                                parm.210.data = 0B;
                                                                                parm.210.offset = -NON_LVALUE_EXPR <D.5385> - NON_LVALUE_EXPR <D.5386>;
                                                                                D.5387 = MAX_EXPR <(parm.210.dim[0].ubound - parm.210.dim[0].lbound) + 1, 0> + -1;
                                                                                __var_6_do = 0;
                                                                                while (1)
                                                                                  {
                                                                                    {
                                                                                      logical(kind=4) D.5390;

                                                                                      D.5390 = __var_6_do > D.5387;
                                                                                      if (D.5390) goto L.100;
                                                                                      xyz[__var_6_do] = xyz[__var_6_do] + *((real(kind=8) *) latvecs.0 + (sizetype) ((((__var_5_do + 1) * stride.41 + offset.42) + (__var_6_do + 1) * stride.39) * 8)) * __var_2_mmb[__var_5_do];
                                                                                      L.99:;
                                                                                      __var_6_do = __var_6_do + 1;
                                                                                    }
                                                                                  }
                                                                                L.100:;
                                                                              }
                                                                              L.97:;
                                                                              __var_5_do = __var_5_do + 1;
                                                                            }
                                                                          }
                                                                        L.98:;
                                                                        L.96:;
                                                                      }
                                                                      L.94:;
                                                                    }
                                                                  }
                                                                L.87:;
                                                                {
                                                                  real(kind=8) val.211;
                                                                  real(kind=8) scale.212;

                                                                  scale.212 = 1.0e+0;
                                                                  val.211 = 0.0;
                                                                  {
                                                                    integer(kind=8) S.213;

                                                                    S.213 = 1;
                                                                    while (1)
                                                                      {
                                                                        if (S.213 > 3) goto L.101;
                                                                        {
                                                                          real(kind=8) absX.214;
                                                                          real(kind=8) val.215;

                                                                          if (xyz[S.213 + -1] != 0.0)
                                                                            {
                                                                              absX.214 = ABS_EXPR <xyz[S.213 + -1]>;
                                                                              if (absX.214 > scale.212)
                                                                                {
                                                                                  val.215 = scale.212 / absX.214;
                                                                                  val.211 = (val.215 * val.215) * val.211 + 1.0e+0;
                                                                                  scale.212 = absX.214;
                                                                                }
                                                                              else
                                                                                {
                                                                                  val.215 = absX.214 / scale.212;
                                                                                  val.211 = val.215 * val.215 + val.211;
                                                                                }
                                                                            }
                                                                        }
                                                                        S.213 = S.213 + 1;
                                                                      }
                                                                    L.101:;
                                                                  }
                                                                  xx = __builtin_sqrt (val.211) * scale.212;
                                                                }
                                                                if (*((real(kind=8) *) cutoffs.0 + (sizetype) (((integer(kind=8)) iorb * stride.13 + offset.14) * 8)) >= xx)
                                                                  {
                                                                    val = {CLOBBER};
                                                                    tslaterorbital_getvalue ((struct tslaterorbital *) stos.0 + (sizetype) (((integer(kind=8)) iorb * stride.59 + offset.60) * 248), &xx, &val);
                                                                    {
                                                                      integer(kind=4) D.5399;
                                                                      integer(kind=4) D.5400;

                                                                      D.5399 = -il;
                                                                      D.5400 = il;
                                                                      im = D.5399;
                                                                      while (1)
                                                                        {
                                                                          {
                                                                            logical(kind=4) D.5403;

                                                                            D.5403 = im > D.5400;
                                                                            if (D.5403) goto L.104;
                                                                            cacheind = (*(integer(kind=4)[0:] * restrict) cacheindexmap.data)[(cacheindexmap.offset + (integer(kind=8)) iorb * cacheindexmap.dim[1].stride) + (integer(kind=8)) im];
                                                                            {
                                                                              struct array01_real(kind=8) parm.216;

                                                                              parm.216.span = 8;
                                                                              parm.216.dtype = {.elem_len=8, .rank=1, .type=3};
                                                                              parm.216.dim[0].lbound = 1;
                                                                              parm.216.dim[0].ubound = 3;
                                                                              parm.216.dim[0].stride = 1;
                                                                              parm.216.data = (void *) &diff[0];
                                                                              parm.216.offset = -1;
                                                                              (*(real(kind=8)[0:] * restrict) wavefunctioncache.data)[((((((wavefunctioncache.offset + (integer(kind=8)) cacheind * wavefunctioncache.dim[6].stride) + (integer(kind=8)) i3chunked * wavefunctioncache.dim[5].stride) + (integer(kind=8)) i3 * wavefunctioncache.dim[4].stride) + (integer(kind=8)) i2chunked * wavefunctioncache.dim[3].stride) + (integer(kind=8)) i2 * wavefunctioncache.dim[2].stride) + (integer(kind=8)) i1chunked * wavefunctioncache.dim[1].stride) + (integer(kind=8)) i1] = realtessy (&il, &im, &parm.216, &xx) * val;
                                                                            }
                                                                            L.103:;
                                                                            im = im + 1;
                                                                          }
                                                                        }
                                                                      L.104:;
                                                                    }
                                                                  }
                                                                L.102:;
                                                                L.82:;
                                                                i1 = i1 + 1;
                                                              }
                                                            }
                                                          L.83:;
                                                        }
                                                        L.80:;
                                                        i1chunked = i1chunked + 1;
                                                      }
                                                    }
                                                  L.81:;
                                                }
                                                L.77:;
                                                i2 = i2 + 1;
                                              }
                                            }
                                          L.78:;
                                        }
                                        L.75:;
                                        i2chunked = i2chunked + 1;
                                      }
                                    }
                                  L.76:;
                                }
                                L.72:;
                                i3 = i3 + 1;
                              }
                            }
                          L.73:;
                        }
                        L.70:;
                        i3chunked = i3chunked + 1;
                      }
                    }
                  L.71:;
                }
                L.68:;
                iorb = iorb + 1;
              }
            }
          L.69:;
        }
        tcacheinitialised = 1;
        __label_000591:;
        {
          struct __st_parameter_dt dt_parm.217;

          dt_parm.217.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
          dt_parm.217.common.line = 334;
          dt_parm.217.common.flags = 128;
          dt_parm.217.common.unit = 6;
          _gfortran_st_write (&dt_parm.217);
          _gfortran_transfer_character_write (&dt_parm.217, &"Applying wavefunctions"[1]{lb: 1 sz: 1}, 22);
          _gfortran_st_write_done (&dt_parm.217);
        }
        {
          integer(kind=4) D.5417;

          D.5417 = *ncell;
          icell = 1;
          while (1)
            {
              {
                logical(kind=4) D.5420;

                D.5420 = icell > D.5417;
                if (D.5420) goto L.106;
                coeffind = 1;
                {
                  integer(kind=4) D.5421;

                  D.5421 = *natom;
                  iatom = 1;
                  while (1)
                    {
                      {
                        logical(kind=4) D.5424;

                        D.5424 = iatom > D.5421;
                        if (D.5424) goto L.108;
                        ispecies = *((integer(kind=4) *) species.0 + (sizetype) (((integer(kind=8)) iatom * stride.55 + offset.56) * 4));
                        {
                          struct __st_parameter_dt dt_parm.218;

                          dt_parm.218.common.filename = &"/home/merlin/Schreibtisch/Fortran/dftbplus/app/waveplot/molorb2.F90"[1]{lb: 1 sz: 1};
                          dt_parm.218.common.line = 340;
                          dt_parm.218.format = &"(*(G0, 1X))"[1]{lb: 1 sz: 1};
                          dt_parm.218.format_len = 11;
                          dt_parm.218.common.flags = 4096;
                          dt_parm.218.common.unit = 6;
                          _gfortran_st_write (&dt_parm.218);
                          _gfortran_transfer_character_write (&dt_parm.218, &" -> Adding contribution of Atom no."[1]{lb: 1 sz: 1}, 35);
                          _gfortran_transfer_integer_write (&dt_parm.218, &iatom, 4);
                          _gfortran_st_write_done (&dt_parm.218);
                        }
                        {
                          integer(kind=8) D.5426;
                          integer(kind=8) D.5427;
                          integer(kind=8) D.5428;
                          integer(kind=8) D.5429;

                          D.5426 = chunkedindices.dim[0].lbound;
                          D.5427 = chunkedindices.dim[0].ubound;
                          D.5428 = (integer(kind=8)) iatom;
                          D.5429 = (integer(kind=8)) icell;
                          ichunk.span = chunkedindices.span;
                          ichunk.dtype = {.elem_len=4, .rank=1, .type=1};
                          ichunk.dim[0].lbound = 1;
                          ichunk.dim[0].ubound = (1 - D.5426) + D.5427;
                          ichunk.dim[0].stride = 1;
                          ichunk.data = (void *) &(*(integer(kind=4)[0:] *) chunkedindices.data)[((D.5426 - chunkedindices.dim[0].lbound) + (D.5428 - chunkedindices.dim[1].lbound) * chunkedindices.dim[1].stride) + (D.5429 - chunkedindices.dim[2].lbound) * chunkedindices.dim[2].stride];
                          ichunk.offset = -1;
                        }
                        {
                          integer(kind=8) D.5430;
                          integer(kind=8) D.5431;
                          integer(kind=8) D.5432;
                          integer(kind=8) D.5433;
                          integer(kind=8) D.5434;
                          integer(kind=8) D.5435;
                          integer(kind=8) D.5436;

                          D.5430 = sliceindicesmain.dim[0].lbound;
                          D.5431 = sliceindicesmain.dim[0].ubound;
                          D.5432 = sliceindicesmain.dim[1].lbound;
                          D.5433 = sliceindicesmain.dim[1].ubound;
                          D.5434 = (integer(kind=8)) iatom;
                          D.5435 = (integer(kind=8)) icell;
                          imain.span = sliceindicesmain.span;
                          imain.dtype = {.elem_len=4, .rank=2, .type=1};
                          imain.dim[0].lbound = 1;
                          imain.dim[0].ubound = (1 - D.5430) + D.5431;
                          imain.dim[0].stride = 1;
                          D.5436 = sliceindicesmain.dim[1].stride;
                          imain.dim[1].lbound = 1;
                          imain.dim[1].ubound = (1 - D.5432) + D.5433;
                          imain.dim[1].stride = NON_LVALUE_EXPR <D.5436>;
                          imain.data = (void *) &(*(integer(kind=4)[0:] *) sliceindicesmain.data)[(((D.5430 - sliceindicesmain.dim[0].lbound) + (D.5432 - sliceindicesmain.dim[1].lbound) * D.5436) + (D.5434 - sliceindicesmain.dim[2].lbound) * sliceindicesmain.dim[2].stride) + (D.5435 - sliceindicesmain.dim[3].lbound) * sliceindicesmain.dim[3].stride];
                          imain.offset = ~NON_LVALUE_EXPR <D.5436>;
                        }
                        {
                          integer(kind=8) D.5437;
                          integer(kind=8) D.5438;
                          integer(kind=8) D.5439;
                          integer(kind=8) D.5440;
                          integer(kind=8) D.5441;
                          integer(kind=8) D.5442;
                          integer(kind=8) D.5443;

                          D.5437 = sliceindicescache.dim[0].lbound;
                          D.5438 = sliceindicescache.dim[0].ubound;
                          D.5439 = sliceindicescache.dim[1].lbound;
                          D.5440 = sliceindicescache.dim[1].ubound;
                          D.5441 = (integer(kind=8)) iatom;
                          D.5442 = (integer(kind=8)) icell;
                          icache.span = sliceindicescache.span;
                          icache.dtype = {.elem_len=4, .rank=2, .type=1};
                          icache.dim[0].lbound = 1;
                          icache.dim[0].ubound = (1 - D.5437) + D.5438;
                          icache.dim[0].stride = 1;
                          D.5443 = sliceindicescache.dim[1].stride;
                          icache.dim[1].lbound = 1;
                          icache.dim[1].ubound = (1 - D.5439) + D.5440;
                          icache.dim[1].stride = NON_LVALUE_EXPR <D.5443>;
                          icache.data = (void *) &(*(integer(kind=4)[0:] *) sliceindicescache.data)[(((D.5437 - sliceindicescache.dim[0].lbound) + (D.5439 - sliceindicescache.dim[1].lbound) * D.5443) + (D.5441 - sliceindicescache.dim[2].lbound) * sliceindicescache.dim[2].stride) + (D.5442 - sliceindicescache.dim[3].lbound) * sliceindicescache.dim[3].stride];
                          icache.offset = ~NON_LVALUE_EXPR <D.5443>;
                        }
                        {
                          integer(kind=4) D.5444;
                          integer(kind=4) D.5445;

                          D.5444 = *((integer(kind=4) *) istos.0 + (sizetype) (((integer(kind=8)) ispecies * stride.29 + offset.30) * 4));
                          D.5445 = *((integer(kind=4) *) istos.0 + (sizetype) (((integer(kind=8)) (ispecies + 1) * stride.29 + offset.30) * 4)) + -1;
                          iorb = D.5444;
                          while (1)
                            {
                              {
                                logical(kind=4) D.5448;

                                D.5448 = iorb > D.5445;
                                if (D.5448) goto L.110;
                                il = *((integer(kind=4) *) angmoms.0 + (sizetype) (((integer(kind=8)) iorb * stride.1 + offset.2) * 4));
                                {
                                  integer(kind=4) D.5449;
                                  integer(kind=4) D.5450;

                                  D.5449 = -il;
                                  D.5450 = il;
                                  im = D.5449;
                                  while (1)
                                    {
                                      {
                                        logical(kind=4) D.5453;

                                        D.5453 = im > D.5450;
                                        if (D.5453) goto L.112;
                                        cacheind = (*(integer(kind=4)[0:] * restrict) cacheindexmap.data)[(cacheindexmap.offset + (integer(kind=8)) iorb * cacheindexmap.dim[1].stride) + (integer(kind=8)) im];
                                        {
                                          integer(kind=4) D.5454;

                                          D.5454 = npoints[3];
                                          ieig = 1;
                                          while (1)
                                            {
                                              {
                                                logical(kind=4) D.5457;

                                                D.5457 = ieig > D.5454;
                                                if (D.5457) goto L.114;
                                                if (*treal)
                                                  {
                                                    if (*tadddensities)
                                                      {
                                                        {
                                                          integer(kind=8) D.5460;
                                                          integer(kind=8) D.5461;
                                                          integer(kind=8) D.5462;
                                                          integer(kind=8) D.5463;
                                                          integer(kind=8) D.5464;
                                                          integer(kind=8) D.5465;
                                                          integer(kind=8) D.5466;
                                                          real(kind=8)[0:] * restrict D.5467;
                                                          integer(kind=8) D.5468;
                                                          integer(kind=8) D.5469;
                                                          integer(kind=8) D.5470;
                                                          integer(kind=8) D.5471;
                                                          integer(kind=8) D.5472;
                                                          integer(kind=8) D.5473;
                                                          integer(kind=8) D.5474;
                                                          integer(kind=8) D.5475;
                                                          integer(kind=8) D.5476;
                                                          integer(kind=8) D.5477;
                                                          integer(kind=8) D.5478;
                                                          integer(kind=8) D.5479;
                                                          integer(kind=8) D.5480;
                                                          integer(kind=8) D.5481;
                                                          integer(kind=8) D.5482;
                                                          real(kind=8) D.5483;
                                                          integer(kind=8) D.5484;
                                                          integer(kind=8) D.5485;
                                                          integer(kind=8) D.5486;
                                                          integer(kind=8) D.5487;
                                                          integer(kind=8) D.5488;
                                                          integer(kind=8) D.5489;
                                                          integer(kind=8) D.5490;
                                                          integer(kind=8) D.5491;
                                                          integer(kind=8) D.5492;
                                                          integer(kind=8) D.5493;
                                                          integer(kind=8) D.5494;

                                                          D.5460 = offset.80;
                                                          D.5461 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + NON_LVALUE_EXPR <imain.dim[0].stride>) * imain.span));
                                                          D.5462 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + NON_LVALUE_EXPR <imain.dim[0].stride>) * imain.span));
                                                          D.5463 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + imain.dim[0].stride * 2) * imain.span));
                                                          D.5464 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + imain.dim[0].stride * 2) * imain.span));
                                                          D.5465 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + imain.dim[0].stride * 3) * imain.span));
                                                          D.5466 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + imain.dim[0].stride * 3) * imain.span));
                                                          D.5467 = (real(kind=8)[0:] * restrict) wavefunctioncache.data;
                                                          D.5468 = wavefunctioncache.offset;
                                                          D.5469 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + NON_LVALUE_EXPR <icache.dim[1].stride>) + NON_LVALUE_EXPR <icache.dim[0].stride>) * icache.span));
                                                          D.5470 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + icache.dim[1].stride * 2) + NON_LVALUE_EXPR <icache.dim[0].stride>) * icache.span));
                                                          D.5471 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + NON_LVALUE_EXPR <icache.dim[1].stride>) + icache.dim[0].stride * 2) * icache.span));
                                                          D.5472 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + icache.dim[1].stride * 2) + icache.dim[0].stride * 2) * icache.span));
                                                          D.5473 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + NON_LVALUE_EXPR <icache.dim[1].stride>) + icache.dim[0].stride * 3) * icache.span));
                                                          D.5474 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + icache.dim[1].stride * 2) + icache.dim[0].stride * 3) * icache.span));
                                                          D.5475 = offset.80;
                                                          D.5476 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + NON_LVALUE_EXPR <imain.dim[0].stride>) * imain.span));
                                                          D.5477 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + NON_LVALUE_EXPR <imain.dim[0].stride>) * imain.span));
                                                          D.5478 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + imain.dim[0].stride * 2) * imain.span));
                                                          D.5479 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + imain.dim[0].stride * 2) * imain.span));
                                                          D.5480 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + imain.dim[0].stride * 3) * imain.span));
                                                          D.5481 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + imain.dim[0].stride * 3) * imain.span));
                                                          D.5482 = (integer(kind=8)) ieig;
                                                          D.5483 = *((real(kind=8) *) eigvecsreal.0 + (sizetype) ((((integer(kind=8)) ieig * stride.19 + offset.20) + (integer(kind=8)) coeffind * stride.17) * 8));
                                                          D.5484 = (integer(kind=8)) *(integer(kind=4) *) (ichunk.data + (sizetype) ((ichunk.offset + NON_LVALUE_EXPR <ichunk.dim[0].stride>) * ichunk.span));
                                                          D.5485 = (integer(kind=8)) *(integer(kind=4) *) (ichunk.data + (sizetype) ((ichunk.offset + ichunk.dim[0].stride * 2) * ichunk.span));
                                                          D.5486 = (integer(kind=8)) *(integer(kind=4) *) (ichunk.data + (sizetype) ((ichunk.offset + ichunk.dim[0].stride * 3) * ichunk.span));
                                                          D.5487 = (integer(kind=8)) cacheind;
                                                          D.5488 = (integer(kind=8)) ieig;
                                                          D.5489 = D.5469 - D.5461;
                                                          D.5490 = D.5471 - D.5463;
                                                          D.5491 = D.5473 - D.5465;
                                                          D.5492 = D.5476 - D.5461;
                                                          D.5493 = D.5478 - D.5463;
                                                          D.5494 = D.5480 - D.5465;
                                                          {
                                                            integer(kind=8) S.219;
                                                            integer(kind=8) D.5496;
                                                            integer(kind=8) D.5497;
                                                            integer(kind=8) D.5498;
                                                            integer(kind=8) D.5499;
                                                            integer(kind=8) D.5500;
                                                            integer(kind=8) D.5501;
                                                            integer(kind=8) D.5502;
                                                            integer(kind=8) D.5503;

                                                            D.5496 = stride.73;
                                                            D.5497 = D.5482 * stride.79 + D.5460;
                                                            D.5498 = wavefunctioncache.dim[1].stride * D.5484 + D.5468;
                                                            D.5499 = wavefunctioncache.dim[3].stride * D.5485 + D.5498;
                                                            D.5500 = wavefunctioncache.dim[5].stride * D.5486 + D.5499;
                                                            D.5501 = wavefunctioncache.dim[6].stride * D.5487 + D.5500;
                                                            D.5502 = stride.73;
                                                            D.5503 = D.5488 * stride.79 + D.5475;
                                                            S.219 = D.5465;
                                                            while (1)
                                                              {
                                                                if (S.219 > D.5466) goto L.119;
                                                                {
                                                                  integer(kind=8) S.220;
                                                                  integer(kind=8) D.5505;
                                                                  integer(kind=8) D.5506;
                                                                  integer(kind=8) D.5507;

                                                                  D.5505 = S.219 * stride.77 + D.5497;
                                                                  D.5506 = (S.219 + D.5491) * wavefunctioncache.dim[4].stride + D.5501;
                                                                  D.5507 = (S.219 + D.5494) * stride.77 + D.5503;
                                                                  S.220 = D.5463;
                                                                  while (1)
                                                                    {
                                                                      if (S.220 > D.5464) goto L.118;
                                                                      {
                                                                        integer(kind=8) S.221;
                                                                        integer(kind=8) D.5509;
                                                                        integer(kind=8) D.5510;
                                                                        integer(kind=8) D.5511;

                                                                        D.5509 = S.220 * stride.75 + D.5505;
                                                                        D.5510 = (S.220 + D.5490) * wavefunctioncache.dim[2].stride + D.5506;
                                                                        D.5511 = (S.220 + D.5493) * stride.75 + D.5507;
                                                                        S.221 = D.5461;
                                                                        while (1)
                                                                          {
                                                                            if (S.221 > D.5462) goto L.117;
                                                                            {
                                                                              real(kind=8) D.5512;
                                                                              real(kind=8) D.5513;

                                                                              D.5512 = (*D.5467)[(S.221 + D.5489) + D.5510];
                                                                              D.5513 = D.5512 * D.5512;
                                                                              *((real(kind=8) *) valuereal.0 + (sizetype) (((S.221 + D.5492) * D.5502 + D.5511) * 8)) = *((real(kind=8) *) valuereal.0 + (sizetype) ((S.221 * D.5496 + D.5509) * 8)) + D.5483 * D.5513;
                                                                            }
                                                                            S.221 = S.221 + 1;
                                                                          }
                                                                        L.117:;
                                                                      }
                                                                      S.220 = S.220 + 1;
                                                                    }
                                                                  L.118:;
                                                                }
                                                                S.219 = S.219 + 1;
                                                              }
                                                            L.119:;
                                                          }
                                                        }
                                                      }
                                                    else
                                                      {
                                                        {
                                                          integer(kind=8) D.5517;
                                                          integer(kind=8) D.5518;
                                                          integer(kind=8) D.5519;
                                                          integer(kind=8) D.5520;
                                                          integer(kind=8) D.5521;
                                                          integer(kind=8) D.5522;
                                                          integer(kind=8) D.5523;
                                                          real(kind=8)[0:] * restrict D.5524;
                                                          integer(kind=8) D.5525;
                                                          integer(kind=8) D.5526;
                                                          integer(kind=8) D.5527;
                                                          integer(kind=8) D.5528;
                                                          integer(kind=8) D.5529;
                                                          integer(kind=8) D.5530;
                                                          integer(kind=8) D.5531;
                                                          integer(kind=8) D.5532;
                                                          integer(kind=8) D.5533;
                                                          integer(kind=8) D.5534;
                                                          integer(kind=8) D.5535;
                                                          integer(kind=8) D.5536;
                                                          integer(kind=8) D.5537;
                                                          integer(kind=8) D.5538;
                                                          integer(kind=8) D.5539;
                                                          real(kind=8) D.5540;
                                                          integer(kind=8) D.5541;
                                                          integer(kind=8) D.5542;
                                                          integer(kind=8) D.5543;
                                                          integer(kind=8) D.5544;
                                                          integer(kind=8) D.5545;
                                                          integer(kind=8) D.5546;
                                                          integer(kind=8) D.5547;
                                                          integer(kind=8) D.5548;
                                                          integer(kind=8) D.5549;
                                                          integer(kind=8) D.5550;
                                                          integer(kind=8) D.5551;

                                                          D.5517 = offset.80;
                                                          D.5518 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + NON_LVALUE_EXPR <imain.dim[0].stride>) * imain.span));
                                                          D.5519 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + NON_LVALUE_EXPR <imain.dim[0].stride>) * imain.span));
                                                          D.5520 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + imain.dim[0].stride * 2) * imain.span));
                                                          D.5521 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + imain.dim[0].stride * 2) * imain.span));
                                                          D.5522 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + imain.dim[0].stride * 3) * imain.span));
                                                          D.5523 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + imain.dim[0].stride * 3) * imain.span));
                                                          D.5524 = (real(kind=8)[0:] * restrict) wavefunctioncache.data;
                                                          D.5525 = wavefunctioncache.offset;
                                                          D.5526 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + NON_LVALUE_EXPR <icache.dim[1].stride>) + NON_LVALUE_EXPR <icache.dim[0].stride>) * icache.span));
                                                          D.5527 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + icache.dim[1].stride * 2) + NON_LVALUE_EXPR <icache.dim[0].stride>) * icache.span));
                                                          D.5528 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + NON_LVALUE_EXPR <icache.dim[1].stride>) + icache.dim[0].stride * 2) * icache.span));
                                                          D.5529 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + icache.dim[1].stride * 2) + icache.dim[0].stride * 2) * icache.span));
                                                          D.5530 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + NON_LVALUE_EXPR <icache.dim[1].stride>) + icache.dim[0].stride * 3) * icache.span));
                                                          D.5531 = (integer(kind=8)) *(integer(kind=4) *) (icache.data + (sizetype) (((icache.offset + icache.dim[1].stride * 2) + icache.dim[0].stride * 3) * icache.span));
                                                          D.5532 = offset.80;
                                                          D.5533 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + NON_LVALUE_EXPR <imain.dim[0].stride>) * imain.span));
                                                          D.5534 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + NON_LVALUE_EXPR <imain.dim[0].stride>) * imain.span));
                                                          D.5535 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + imain.dim[0].stride * 2) * imain.span));
                                                          D.5536 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + imain.dim[0].stride * 2) * imain.span));
                                                          D.5537 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + NON_LVALUE_EXPR <imain.dim[1].stride>) + imain.dim[0].stride * 3) * imain.span));
                                                          D.5538 = (integer(kind=8)) *(integer(kind=4) *) (imain.data + (sizetype) (((imain.offset + imain.dim[1].stride * 2) + imain.dim[0].stride * 3) * imain.span));
                                                          D.5539 = (integer(kind=8)) ieig;
                                                          D.5540 = *((real(kind=8) *) eigvecsreal.0 + (sizetype) ((((integer(kind=8)) ieig * stride.19 + offset.20) + (integer(kind=8)) coeffind * stride.17) * 8));
                                                          D.5541 = (integer(kind=8)) *(integer(kind=4) *) (ichunk.data + (sizetype) ((ichunk.offset + NON_LVALUE_EXPR <ichunk.dim[0].stride>) * ichunk.span));
                                                          D.5542 = (integer(kind=8)) *(integer(kind=4) *) (ichunk.data + (sizetype) ((ichunk.offset + ichunk.dim[0].stride * 2) * ichunk.span));
                                                          D.5543 = (integer(kind=8)) *(integer(kind=4) *) (ichunk.data + (sizetype) ((ichunk.offset + ichunk.dim[0].stride * 3) * ichunk.span));
                                                          D.5544 = (integer(kind=8)) cacheind;
                                                          D.5545 = (integer(kind=8)) ieig;
                                                          D.5546 = D.5526 - D.5518;
                                                          D.5547 = D.5528 - D.5520;
                                                          D.5548 = D.5530 - D.5522;
                                                          D.5549 = D.5533 - D.5518;
                                                          D.5550 = D.5535 - D.5520;
                                                          D.5551 = D.5537 - D.5522;
                                                          {
                                                            integer(kind=8) S.222;
                                                            integer(kind=8) D.5553;
                                                            integer(kind=8) D.5554;
                                                            integer(kind=8) D.5555;
                                                            integer(kind=8) D.5556;
                                                            integer(kind=8) D.5557;
                                                            integer(kind=8) D.5558;
                                                            integer(kind=8) D.5559;
                                                            integer(kind=8) D.5560;

                                                            D.5553 = stride.73;
                                                            D.5554 = D.5539 * stride.79 + D.5517;
                                                            D.5555 = wavefunctioncache.dim[1].stride * D.5541 + D.5525;
                                                            D.5556 = wavefunctioncache.dim[3].stride * D.5542 + D.5555;
                                                            D.5557 = wavefunctioncache.dim[5].stride * D.5543 + D.5556;
                                                            D.5558 = wavefunctioncache.dim[6].stride * D.5544 + D.5557;
                                                            D.5559 = stride.73;
                                                            D.5560 = D.5545 * stride.79 + D.5532;
                                                            S.222 = D.5522;
                                                            while (1)
                                                              {
                                                                if (S.222 > D.5523) goto L.122;
                                                                {
                                                                  integer(kind=8) S.223;
                                                                  integer(kind=8) D.5562;
                                                                  integer(kind=8) D.5563;
                                                                  integer(kind=8) D.5564;

                                                                  D.5562 = S.222 * stride.77 + D.5554;
                                                                  D.5563 = (S.222 + D.5548) * wavefunctioncache.dim[4].stride + D.5558;
                                                                  D.5564 = (S.222 + D.5551) * stride.77 + D.5560;
                                                                  S.223 = D.5520;
                                                                  while (1)
                                                                    {
                                                                      if (S.223 > D.5521) goto L.121;
                                                                      {
                                                                        integer(kind=8) S.224;
                                                                        integer(kind=8) D.5566;
                                                                        integer(kind=8) D.5567;
                                                                        integer(kind=8) D.5568;

                                                                        D.5566 = S.223 * stride.75 + D.5562;
                                                                        D.5567 = (S.223 + D.5547) * wavefunctioncache.dim[2].stride + D.5563;
                                                                        D.5568 = (S.223 + D.5550) * stride.75 + D.5564;
                                                                        S.224 = D.5518;
                                                                        while (1)
                                                                          {
                                                                            if (S.224 > D.5519) goto L.120;
                                                                            *((real(kind=8) *) valuereal.0 + (sizetype) (((S.224 + D.5549) * D.5559 + D.5568) * 8)) = *((real(kind=8) *) valuereal.0 + (sizetype) ((S.224 * D.5553 + D.5566) * 8)) + (*D.5524)[(S.224 + D.5546) + D.5567] * D.5540;
                                                                            S.224 = S.224 + 1;
                                                                          }
                                                                        L.120:;
                                                                      }
                                                                      S.223 = S.223 + 1;
                                                                    }
                                                                  L.121:;
                                                                }
                                                                S.222 = S.222 + 1;
                                                              }
                                                            L.122:;
                                                          }
                                                        }
                                                      }
                                                    L.116:;
                                                  }
                                                else
                                                  {
                                                    _gfortran_stop_string (&"TODO: Complex not implemented yet"[1]{lb: 1 sz: 1}, 33, 0);
                                                  }
                                                L.115:;
                                                L.113:;
                                                ieig = ieig + 1;
                                              }
                                            }
                                          L.114:;
                                        }
                                        coeffind = coeffind + 1;
                                        L.111:;
                                        im = im + 1;
                                      }
                                    }
                                  L.112:;
                                }
                                L.109:;
                                iorb = iorb + 1;
                              }
                            }
                          L.110:;
                        }
                        L.107:;
                        iatom = iatom + 1;
                      }
                    }
                  L.108:;
                }
                L.105:;
                icell = icell + 1;
              }
            }
          L.106:;
        }
      }
    }
  finally
    {
      if ((integer(kind=4)[0:] * restrict) cacheindexmap.data != 0B)
        {
          __builtin_free ((void *) cacheindexmap.data);
          (integer(kind=4)[0:] * restrict) cacheindexmap.data = 0B;
        }
    }
}


